(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    292834,       5626]
NotebookOptionsPosition[    290719,       5583]
NotebookOutlinePosition[    291116,       5599]
CellTagsIndexPosition[    291073,       5596]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Github Test", "Title",
 CellChangeTimes->{{3.9105091477645636`*^9, 
  3.910509149135044*^9}},ExpressionUUID->"256a3eaf-adf7-4d54-b882-\
918b704f819e"],

Cell["\<\
Source: https://raw.githubusercontent.com/antononcube/\
MathematicaForPrediction/master/Misc/GitHubDataObjects.m\
\>", "Subtitle",
 CellChangeTimes->{{3.9105091678399453`*^9, 
  3.910509168741496*^9}},ExpressionUUID->"9a3f92f1-b4ec-4a0e-98d1-\
29be673f3e2b"],

Cell[CellGroupData[{

Cell["Code", "Section",
 CellChangeTimes->{{3.9105091873468957`*^9, 
  3.910509187651596*^9}},ExpressionUUID->"868900ea-5a7a-4653-97b3-\
fbafadf79a9d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "GitHubDataObjects", " ", "Mathematica", " ", "package", " ", "Copyright",
      " ", 
     RowBox[{"(", "C", ")"}], " ", "2015", " ", "Anton", " ", "Antonov", " ", 
     "This", " ", "program", " ", "is", " ", "free", " ", 
     RowBox[{"software", ":", 
      RowBox[{"you", " ", "can", " ", "redistribute", " ", "it", " ", 
       RowBox[{"and", "/", "or"}], " ", "modify", " ", "it", " ", "under", 
       " ", "the", " ", "terms", " ", "of", " ", "the", " ", "GNU", " ", 
       "General", " ", "Public", " ", "License", " ", "as", " ", "published", 
       " ", "by", " ", "the", " ", "Free", " ", "Software", " ", 
       "Foundation"}]}]}], ",", 
    RowBox[{
    "either", " ", "version", " ", "3", " ", "of", " ", "the", " ", 
     "License"}], ",", 
    RowBox[{"or", " ", 
     RowBox[{"(", 
      RowBox[{"at", " ", "your", " ", "option"}], ")"}], " ", "any", " ", 
     "later", " ", 
     RowBox[{"version", ".", "This"}], " ", "program", " ", "is", " ", 
     "distributed", " ", "in", " ", "the", " ", "hope", " ", "that", " ", 
     "it", " ", "will", " ", "be", " ", "useful"}], ",", 
    RowBox[{
     RowBox[{"but", " ", "WITHOUT", " ", "ANY", " ", "WARRANTY"}], ";", 
     RowBox[{
     "without", " ", "even", " ", "the", " ", "implied", " ", "warranty", " ",
       "of", " ", "MERCHANTABILITY", " ", "or", " ", "FITNESS", " ", "FOR", 
      " ", "A", " ", "PARTICULAR", " ", 
      RowBox[{"PURPOSE", ".", "See"}], " ", "the", " ", "GNU", " ", "General",
       " ", "Public", " ", "License", " ", "for", " ", "more", " ", 
      RowBox[{"details", ".", "You"}], " ", "should", " ", "have", " ", 
      "received", " ", "a", " ", "copy", " ", "of", " ", "the", " ", "GNU", 
      " ", "General", " ", "Public", " ", "License", " ", "along", " ", 
      "with", " ", "this", " ", 
      RowBox[{"program", ".", "If"}], " ", "not"}]}], ",", 
    RowBox[{
     RowBox[{"see", "<", 
      RowBox[{"http", ":"}]}], "//", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"www", ".", "gnu", ".", "org"}], "/", "licenses"}], "/"}], 
      ">", 
      RowBox[{
       RowBox[{".", "Written"}], " ", "by", " ", "Anton", " ", 
       "Antonov"}]}]}], ",", 
    RowBox[{
     RowBox[{"antononcube", "@", "gmail"}], ".", "com"}], ",", "Windermere", 
    ",", "Florida", ",", 
    RowBox[{"USA", "."}]}], "*)"}], 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"Mathematica", " ", "is", " ", 
      RowBox[{"(", "C", ")"}], " ", "Copyright", " ", "1988"}], "-", 
     RowBox[{"2015", " ", "Wolfram", " ", "Research"}]}], ",", 
    RowBox[{
     RowBox[{"Inc", ".", "Protected"}], " ", "by", " ", "copyright", " ", 
     "law", " ", "and", " ", "international", " ", 
     RowBox[{"treaties", ".", "Unauthorized"}], " ", "reproduction", " ", 
     "or", " ", "distribution", " ", "subject", " ", "to", " ", "severe", " ",
      "civil", " ", "and", " ", "criminal", " ", 
     RowBox[{"penalties", ".", "Mathematica"}], " ", "is", " ", "a", " ", 
     "registered", " ", "trademark", " ", "of", " ", "Wolfram", " ", 
     "Research"}], ",", 
    RowBox[{"Inc", "."}]}], "*)"}], 
  RowBox[{"(*", " ", 
   RowBox[{":", "Title", ":", "GitHubDataObjects"}], "*)"}], 
  RowBox[{"(*", " ", 
   RowBox[{":", "Author", ":", 
    RowBox[{"Anton", " ", "Antonov"}]}], "*)"}], 
  RowBox[{"(*", " ", 
   RowBox[{":", "Date", ":", 
    RowBox[{"2015", "-", "10", "-", "15"}]}], "*)"}], 
  RowBox[{"(*", " ", 
   RowBox[{":", 
    RowBox[{"Package", " ", "Version"}], ":", "0.1"}], "*)"}], 
  RowBox[{"(*", " ", 
   RowBox[{":", 
    RowBox[{"Mathematica", " ", "Version"}], ":", "10.2"}], "*)"}], 
  RowBox[{"(*", " ", 
   RowBox[{":", "Copyright", ":", 
    RowBox[{
     RowBox[{"(", "c", ")"}], " ", "2015", " ", "Anton", " ", "Antonov"}]}], 
   "*)"}], 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{":", "Keywords", ":", "GitHub"}], ",", "commit", ",", "plot", ",", 
    RowBox[{"design", " ", "patterns"}], ",", 
    RowBox[{"Template", " ", "Method"}], ",", "Strategy", ",", "Decorator", 
    ",", "Composite", ",", "GoF"}], "*)"}], 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{":", "Discussion", ":", 
     RowBox[{
      RowBox[{"This", " ", "package", " ", "provides", " ", "object"}], "-", 
      RowBox[{
      "oriented", " ", "implementation", " ", "of", " ", "visualization", " ",
        "and", " ", "query", " ", "tasks", " ", "of", " ", "commits", " ", 
       "data", " ", "from", " ", 
       RowBox[{"GiHub", ".", "The"}], " ", "implementation", " ", "uses", " ",
        "the", " ", "design", " ", "patterns", " ", "Template", " ", 
       "Method"}]}]}], ",", "Strategy", ",", "Decorator", ",", 
    RowBox[{
    "and", " ", "Composite", " ", "described", " ", "in", " ", "the", " ", 
     RowBox[{"book", ":", 
      RowBox[{
       RowBox[{"[", 
        RowBox[{"GoF", "-", "94"}], "]"}], " ", "Erich", " ", "Gamma"}]}]}], 
    ",", 
    RowBox[{"Richard", " ", "Helm"}], ",", 
    RowBox[{"Ralph", " ", "Johnson"}], ",", 
    RowBox[{"John", " ", "Vlissides"}], ",", 
    RowBox[{"Design", " ", 
     RowBox[{"Patterns", ":", 
      RowBox[{
       RowBox[{"Elements", " ", "of", " ", "Reusable", " ", "Object"}], "-", 
       RowBox[{"Oriented", " ", "Software"}]}]}]}], ",", 
    RowBox[{"Addison", "-", "Wesley"}], ",", 
    RowBox[{
     RowBox[{
     "1994.", " ", "The", " ", "implementation", " ", "is", " ", "a", " ", 
      "modified", " ", "and", " ", "extended", " ", "version", " ", "of", " ",
       "the", " ", "functions", " ", "in", " ", "the", " ", "package", " ", 
      RowBox[{"\"\<GitHubPlots.m\>\"", ".", 
       RowBox[{"(", 
        RowBox[{
        "Which", " ", "is", " ", "also", " ", "provided", " ", "in", " ", 
         "this", " ", "MathematicaForPrediction", " ", "GitHub", " ", 
         RowBox[{"project", "."}]}], ")"}]}], " ", "The", " ", "most", " ", 
      "significant", " ", "feature", " ", "of", " ", "this", " ", "package", 
      " ", "is", " ", "the", " ", "method", " ", "\"\<Plot3D\>\"", " ", "for",
       " ", "a", " ", "collection", " ", "of", " ", "GitHub", " ", 
      RowBox[{"projects", ".", "Here"}], " ", "is", " ", "an", " ", "example",
       " ", "how", " ", "to", " ", "use", " ", 
      RowBox[{"it", ":", "ghs"}]}], "=", 
     RowBox[{
      RowBox[{
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"MakeGitHubDataObject", "[", 
           RowBox[{"\"\<hadley\>\"", ",", "#"}], "]"}], "&"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "\"\<plyr\>\"", ",", "\"\<dplyr\>\"", ",", "\"\<adv-r\>\"", ",", 
           "\"\<ggplot2\>\"", ",", "\"\<devtools\>\"", ",", "\"\<rvest\>\""}],
           "}"}]}], "]"}], " ", "ghComposite"}], "=", 
      RowBox[{
       RowBox[{
        RowBox[{"GitHubDataComposite", "[", 
         RowBox[{
          RowBox[{"Unique", "[", "]"}], ",", "ghs"}], "]"}], " ", 
        RowBox[{"Through", "[", 
         RowBox[{
          RowBox[{"ghComposite", "[", 
           RowBox[{"\"\<GetChildren\>\"", "[", "]"}], "]"}], "@", 
          RowBox[{"\"\<Project\>\"", "[", "]"}]}], "]"}], " ", 
        RowBox[{"ghComposite", "[", 
         RowBox[{"\"\<Plot3D\>\"", "[", 
          RowBox[{
           RowBox[{"\"\<ProjectPlanes\>\"", "->", "True"}], ",", 
           RowBox[{"BoxRatios", "->", 
            RowBox[{"{", 
             RowBox[{"1", ",", "2", ",", "2"}], "}"}]}]}], "]"}], "]"}], " ", 
        RowBox[{"ghComposite", "[", 
         RowBox[{"\"\<Plot3D\>\"", "[", 
          RowBox[{
           RowBox[{"\"\<ProjectPlanes\>\"", "->", "False"}], ",", 
           RowBox[{"\"\<GlobalTimeOrder\>\"", "->", "False"}], ",", 
           RowBox[{"\"\<SubsetQueryFunction\>\"", "->", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"StringMatchQ", "[", 
               RowBox[{"#committer", ",", 
                RowBox[{"___", "~~", 
                 RowBox[{"\"\<Hadley\>\"", "|", "\"\<hadley\>\""}], "~~", 
                 "___"}]}], "]"}], "&"}], ")"}]}], ",", 
           RowBox[{"\"\<SubsetLines\>\"", "->", "True"}], ",", 
           RowBox[{"\"\<SubsetPlotStyle\>\"", "->", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"PointSize", "[", "0.02", "]"}], ",", 
              RowBox[{"Lighter", "[", "Purple", "]"}], ",", 
              RowBox[{"Arrowheads", "[", 
               RowBox[{
                RowBox[{"10", "^", 
                 RowBox[{"-", "7.7"}]}], ",", 
                RowBox[{"Appearance", "->", "\"\<Flat\>\""}]}], "]"}]}], 
             "}"}]}], ",", 
           RowBox[{"PlotLabel", "->", "\"\<Hadley Wickham\>\""}], ",", 
           RowBox[{"BoxRatios", "->", 
            RowBox[{"{", 
             RowBox[{"1", ",", "2", ",", "2"}], "}"}]}]}], "]"}], "]"}], " ", 
        "Descriptions", " ", "of", " ", "the", " ", "options", " ", 
        RowBox[{"follow", ".", "1."}], " ", "\"\<ProjectPlanes\>\""}], "->", 
       RowBox[{
        RowBox[{"True", "|", 
         RowBox[{
         "False", " ", "Should", " ", "planes", " ", "for", " ", "the", " ", 
          "projects", " ", "be", " ", "drawn", " ", "on", " ", "the", " ", 
          "3", "D", " ", 
          RowBox[{"plot", ".", "2."}], " ", "\"\<GlobalTimeOrder\>\""}]}], "->", 
        RowBox[{
         RowBox[{"True", "|", 
          RowBox[{
          "False", " ", "Should", " ", "the", " ", "points", " ", "be", " ", 
           "ordered", " ", "globally", " ", "in", " ", "time", " ", "or", " ",
            "for", " ", "each", " ", "project", " ", 
           RowBox[{"separately", ".", "If"}], " ", "False", " ", "the", " ", 
           "points", " ", "of", " ", "each", " ", "project", " ", "are", " ", 
           "given", " ", "Z", " ", "coordinate", " ", "corresponding", " ", 
           "to", " ", "their", " ", "commit", " ", 
           RowBox[{"order", ".", "If"}], " ", "True", " ", "the", " ", 
           "points", " ", "of", " ", "all", " ", "projects", " ", "are", " ", 
           "ordered", " ", "according", " ", "to", " ", "their", " ", "times",
            " ", "and", " ", "their", " ", "Z", " ", "coordinates", " ", 
           "are", " ", "derived", " ", "from", " ", "that", " ", "global", 
           " ", 
           RowBox[{"order", ".", "3."}], " ", 
           "\"\<SubsetQueryFunction\>\""}]}], "->", 
         RowBox[{
          RowBox[{
          "selectFunc", " ", "Allows", " ", "for", " ", "selection", " ", 
           "of", " ", "points", " ", "that", " ", "adhere", " ", "to", " ", 
           "a", " ", 
           RowBox[{"predicate", ".", "The"}], " ", "function", " ", 
           "selectFunc", " ", "is", " ", "used", " ", "in", " ", "the", " ", 
           RowBox[{"Dataset", "'"}], "s", " ", "corresponding", " ", "to", 
           " ", "the", " ", "projects", " ", "and", " ", "from", " ", "the", 
           " ", "obtained", " ", "rows", " ", "the", " ", "subset", " ", "of",
            " ", "points", " ", "is", " ", 
           RowBox[{"derived", ".", "4."}], " ", "\"\<SubsetLines\>\""}], "->", 
          RowBox[{
           RowBox[{"True", "|", 
            RowBox[{"False", " ", "Should", " ", "line", " ", "segments", " ", 
             RowBox[{"(", "arrows", ")"}], " ", "be", " ", "drawn", " ", 
             "between", " ", "the", " ", "subset", " ", 
             RowBox[{"points", ".", "5."}], " ", 
             "\"\<SubsetPlotStyle\>\""}]}], "->", 
           RowBox[{
           "subPloStyle", " ", "Graphics3D", " ", "directive", " ", "for", 
            " ", "the", " ", "color"}]}]}]}]}]}]}]}], ",", "size", ",", 
    RowBox[{
     RowBox[{"etc", ".", "of"}], " ", "the", " ", "points", " ", "and", " ", 
     "lines", " ", "corresponding", " ", "to", " ", "the", " ", "specified", 
     " ", 
     RowBox[{"subset", ".", "6."}], " ", "Other", " ", "Graphics3D", " ", 
     "options", " ", "passed", " ", "to", " ", 
     RowBox[{"Graphics3D", ".", "The"}], " ", "implementation", " ", 
     "description", " ", "with", " ", "design", " ", 
     RowBox[{"patterns", ":", 
      RowBox[{
       RowBox[{"-", "Template"}], " ", "Method", " ", "is", " ", "used", " ", 
       "for", " ", "the", " ", "general", " ", "flow", " ", "of", " ", "the", 
       " ", "data", " ", "obtaining"}]}]}], ",", "parsing", ",", 
    RowBox[{"and", " ", 
     RowBox[{"plotting", ".", 
      RowBox[{"-", "Strategy"}]}], " ", "is", " ", "used", " ", "for", " ", 
     "the", " ", "different", " ", "types", " ", "of", " ", "plots", " ", 
     "based", " ", "on", " ", "DateListPlot"}], ",", "BarChart", ",", 
    RowBox[{"and", " ", 
     RowBox[{"Graphics3D", ".", 
      RowBox[{"-", "Decorator"}]}], " ", "is", " ", "used", " ", "to", " ", 
     "endow", " ", "the", " ", "DateListPlot", " ", "based", " ", "plots", 
     " ", "with", " ", "lines", " ", "of", " ", "the", " ", "commit", " ", 
     RowBox[{"dependencies", ".", 
      RowBox[{"-", "Decorator"}]}], " ", "is", " ", "used", " ", "to", " ", 
     "give", " ", "color", " ", "to", " ", "the", " ", "ticks", " ", "and", 
     " ", "points", " ", "in", " ", "the", " ", 
     RowBox[{"plots", ".", 
      RowBox[{"-", "For"}]}], " ", "a", " ", "collection", " ", "of", " ", 
     "GitHub", " ", "projects", " ", "Composite", " ", "is", " ", "used", " ",
      "to", " ", "obtain", " ", "plots", " ", "with", " ", "uniform", " ", 
     "ranges"}], ",", 
    RowBox[{
    "and", " ", "to", " ", "make", " ", "a", " ", "3", "D", " ", "plot", " ", 
     "of", " ", "the", " ", "data", " ", "of", " ", "all", " ", "projects", 
     " ", "highlighting", " ", "a", " ", "subset", " ", "of", " ", "the", " ",
      "data", " ", 
     RowBox[{"points", ".", "The"}], " ", "functions", " ", "are", " ", "not",
      " ", "put", " ", "into", " ", "a", " ", "real", " ", "Mathematica", " ",
      "package", " ", "because", " ", "the", " ", "implementations", " ", 
     "were", " ", "made", " ", "for", " ", "didactic", " ", 
     RowBox[{"purposes", ".", 
      RowBox[{"TODO", ":", 
       RowBox[{
        RowBox[{
        "1.", " ", "Implement", " ", "standard", " ", "functions", " ", 
         "based", " ", "on", " ", "the", " ", 
         RowBox[{"classes", "/", "objects"}], " ", "implemented", " ", 
         RowBox[{"here", ".", "2."}], " ", "Refactor", " ", "the", " ", 
         "code", " ", "to", " ", "be", " ", "able", " ", "to", " ", "work", 
         " ", "with", " ", "other", " ", "types", " ", "time", " ", "logs", 
         " ", 
         RowBox[{"data", ".", "This"}], " ", "file", " ", "was", " ", 
         "created", " ", "using", " ", "Mathematica", " ", "Plugin", " ", 
         "for", " ", "IntelliJ", " ", 
         RowBox[{"IDEA", ".", "Anton"}], " ", "Antonov", " ", "2015"}], "-", 
        "10", "-", "15"}]}]}]}]}], "*)"}], 
  RowBox[{
  "(*", "*********************************************************)"}], 
  RowBox[{"(*", "Creation", "*)"}], 
  RowBox[{
  "(*", "*********************************************************)"}], 
  RowBox[{"(*", 
   RowBox[{"Clear", "[", "GitHubData", "]"}], "*)"}], 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"MakeGitHubDataObject", "[", 
      RowBox[{"user_String", ",", "project_String"}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"objID", "=", 
         RowBox[{"Unique", "[", "]"}]}], "}"}], ",", 
       RowBox[{
        RowBox[{"GitHubData", "[", 
         RowBox[{"{", 
          RowBox[{"objID", ",", "user", ",", "project"}], "}"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"GitHubData", "[", 
           RowBox[{"{", 
            RowBox[{"objID", ",", "user", ",", "project"}], "}"}], "]"}], 
          "[", "\"\<CommitData\>\"", "]"}], "=", 
         RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"GitHubData", "[", 
           RowBox[{"{", 
            RowBox[{"objID", ",", "user", ",", "project"}], "}"}], "]"}], 
          "[", "\"\<PlotFunction\>\"", "]"}], "=", "GHDDateListPlot"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"GitHubData", "[", 
         RowBox[{"{", 
          RowBox[{"objID", ",", "user", ",", "project"}], "}"}], "]"}]}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
   "(*", "*********************************************************)"}], "\n", 
   RowBox[{"(*", 
    RowBox[{"Data", " ", "download"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
   "(*", "*********************************************************)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"GitHubData", "[", "args__", "]"}], "[", 
      RowBox[{"\"\<GetData\>\"", "[", "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"GitHubData", "[", "args", "]"}], "[", 
      RowBox[{"\"\<GetData\>\"", "[", 
       RowBox[{"1", ",", "30"}], "]"}], "]"}]}], ";"}], "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"GitHubData", "[", 
       RowBox[{"{", 
        RowBox[{"objID_", ",", "user_String", ",", "project_String"}], "}"}], 
       "]"}], "[", 
      RowBox[{"\"\<GetData\>\"", "[", 
       RowBox[{"page_Integer", ",", "perPage_Integer"}], "]"}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"obj", "=", 
          RowBox[{"GitHubData", "[", 
           RowBox[{"{", 
            RowBox[{"objID", ",", "user", ",", "project"}], "}"}], "]"}]}], 
         ",", "url", ",", "data"}], "}"}], ",", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{"obj", "[", "\"\<CommitData\>\"", "]"}], "]"}], "==", 
           "0"}], ",", 
          RowBox[{
           RowBox[{"url", "=", 
            RowBox[{
            "StringTemplate", "[", 
             "\"\<https://api.github.com/repos/`1`/`2`/commits?page=`3`&per_\
page=`4`\>\"", "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"data", "=", 
            RowBox[{"Import", "[", 
             RowBox[{
              RowBox[{"url", "[", 
               RowBox[{"user", ",", "project", ",", 
                RowBox[{"ToString", "[", "page", "]"}], ",", 
                RowBox[{"ToString", "[", "perPage", "]"}]}], "]"}], ",", 
              "\"\<JSON\>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"obj", "[", "\"\<CommitData\>\"", "]"}], "=", "data"}], 
           ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"obj", "[", "\"\<CommitData\>\"", "]"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
   "(*", "*********************************************************)"}], "\n", 
   RowBox[{"(*", "Parsing", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
   "(*", "*********************************************************)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"Clear", "[", "ParseGitRecord", "]"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"ParseGitRecord", "[", "recRules_", "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "sha", ",", "message", ",", "committer", ",", "date", ",", 
         "parentSha", ",", "htmlURL"}], "}"}], ",", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Print", "[", "\"\<ParseGitRecord called.\>\"", "]"}], ";"}],
         "*)"}], 
       RowBox[{
        RowBox[{"sha", "=", 
         RowBox[{"\"\<sha\>\"", "/.", " ", "recRules"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"message", "=", 
         RowBox[{"StringReplace", "[", 
          RowBox[{
           RowBox[{"\"\<message\>\"", "/.", " ", 
            RowBox[{"(", 
             RowBox[{"\"\<commit\>\"", "/.", " ", "recRules"}], ")"}]}], ",", 
           RowBox[{"Whitespace", "->", "\"\< \>\""}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"committer", "=", 
         RowBox[{"\"\<name\>\"", "/.", " ", 
          RowBox[{"(", 
           RowBox[{"\"\<committer\>\"", "/.", " ", 
            RowBox[{"(", 
             RowBox[{"\"\<commit\>\"", "/.", " ", "recRules"}], ")"}]}], 
           ")"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"date", "=", 
         RowBox[{"\"\<date\>\"", "/.", " ", 
          RowBox[{"(", 
           RowBox[{"\"\<committer\>\"", "/.", " ", 
            RowBox[{"(", 
             RowBox[{"\"\<commit\>\"", "/.", " ", "recRules"}], ")"}]}], 
           ")"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"parentSha", "=", 
         RowBox[{"\"\<sha\>\"", "/.", " ", 
          RowBox[{"(", 
           RowBox[{"\"\<parents\>\"", "/.", " ", "recRules"}], ")"}]}]}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"htmlURL", "=", 
         RowBox[{"\"\<html_url\>\"", "/.", " ", "recRules"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Thread", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<sha\>\"", ",", "\"\<message\>\"", ",", "\"\<committer\>\"", 
            ",", "\"\<date\>\"", ",", "\"\<parentSha\>\"", ",", 
            "\"\<htmlURL\>\""}], "}"}], "->", 
          RowBox[{"{", 
           RowBox[{
           "sha", ",", "message", ",", "committer", ",", "date", ",", 
            "parentSha", ",", "htmlURL"}], "}"}]}], "]"}]}]}], "]"}]}], ";"}],
    "\[IndentingNewLine]", "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"GitHubData", "[", 
       RowBox[{"{", 
        RowBox[{"objID_", ",", "user_String", ",", "project_String"}], "}"}], 
       "]"}], "[", 
      RowBox[{"\"\<ParseData\>\"", "[", "]"}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"obj", "=", 
          RowBox[{"GitHubData", "[", 
           RowBox[{"{", 
            RowBox[{"objID", ",", "user", ",", "project"}], "}"}], "]"}]}], 
         ",", "commitRecs", ",", "graphRules", ",", "unknown", ",", 
         "unknownDate"}], "}"}], ",", 
       RowBox[{"(*", 
        RowBox[{
        "Similarly", " ", "to", " ", "the", " ", "previous", " ", 
         "implementation", " ", 
         RowBox[{"code", "."}]}], "*)"}], 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", 
             RowBox[{"obj", "[", "\"\<CommitRecords\>\"", "]"}], "]"}], "==", 
            "0"}], "||", 
           RowBox[{"!", 
            RowBox[{"ListQ", "[", 
             RowBox[{"obj", "[", "\"\<CommitRecords\>\"", "]"}], "]"}]}]}], 
          ",", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Evaluate", "[", "obj", "]"}], "[", 
             "\"\<CommitRecords\>\"", "]"}], "=", 
            RowBox[{"SortBy", "[", 
             RowBox[{
              RowBox[{"ParseGitRecord", "/@", 
               RowBox[{"obj", "[", 
                RowBox[{"\"\<GetData\>\"", "[", "]"}], "]"}]}], ",", 
              RowBox[{
               RowBox[{"\"\<date\>\"", "/.", " ", "#"}], "&"}]}], "]"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{"A", " ", 
             RowBox[{"shortcut", "."}]}], "*)"}], 
           RowBox[{"commitRecs", "=", 
            RowBox[{
             RowBox[{"GitHubData", "[", 
              RowBox[{"{", 
               RowBox[{"objID", ",", "user", ",", "project"}], "}"}], "]"}], 
             "[", "\"\<CommitRecords\>\"", "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
            "Make", " ", "a", " ", "commits", " ", "graph", " ", "rules"}], 
            "*)"}], 
           RowBox[{"graphRules", "=", 
            RowBox[{"Flatten", "@", 
             RowBox[{"Map", "[", 
              RowBox[{"Thread", ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"\"\<parentSha\>\"", "->", "\"\<sha\>\""}], ")"}], "/.",
                 " ", "commitRecs"}]}], "]"}]}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
            "Find", " ", "the", " ", "unknown", " ", "parents", " ", "and", 
             " ", "add", " ", "empty", " ", "records", " ", "for", " ", 
             RowBox[{"them", "."}]}], "*)"}], 
           RowBox[{"unknown", "=", 
            RowBox[{"Complement", "[", 
             RowBox[{
              RowBox[{"Union", "[", 
               RowBox[{"Flatten", "[", 
                RowBox[{"List", "@@@", "graphRules"}], "]"}], "]"}], ",", 
              RowBox[{"\"\<sha\>\"", "/.", " ", "commitRecs"}]}], "]"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
            "Offset", " ", "the", " ", "commit", " ", "dates", " ", "of", " ",
              "the", " ", "unknown", " ", "commits", " ", "to", " ", "be", 
             " ", "one", " ", "day", " ", 
             RowBox[{"behind", "."}]}], "*)"}], 
           RowBox[{"unknownDate", "=", 
            RowBox[{"DateString", "[", 
             RowBox[{
              RowBox[{"Min", "[", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"AbsoluteTime", "[", 
                   RowBox[{"DateList", "[", "#", "]"}], "]"}], "&"}], ",", 
                 RowBox[{"\"\<date\>\"", "/.", " ", "commitRecs"}]}], "]"}], 
               "]"}], "-", 
              RowBox[{"24", "*", "3600"}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
            "Add", " ", "records", " ", "for", " ", "the", " ", "unknown", 
             " ", 
             RowBox[{"commits", "."}]}], "*)"}], 
           RowBox[{"commitRecs", "=", 
            RowBox[{"Join", "[", 
             RowBox[{"commitRecs", ",", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"\"\<sha\>\"", "->", "#"}], ",", 
                   RowBox[{"\"\<message\>\"", "->", "\"\<none\>\""}], ",", 
                   RowBox[{"\"\<committer\>\"", "->", "\"\<unknown\>\""}], 
                   ",", 
                   RowBox[{"\"\<date\>\"", "->", "unknownDate"}], ",", 
                   RowBox[{"\"\<parentSha\>\"", "->", "\"\<none\>\""}]}], 
                  "}"}], "&"}], ",", "unknown"}], "]"}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"commitRecs", "=", 
            RowBox[{"SortBy", "[", 
             RowBox[{"commitRecs", ",", 
              RowBox[{
               RowBox[{"DateList", "[", 
                RowBox[{"\"\<date\>\"", "/.", " ", "#"}], "]"}], "&"}]}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{"Assign", " ", "and", " ", "return", " ", 
             RowBox[{"result", "."}]}], "*)"}], 
           RowBox[{
            RowBox[{"obj", "[", "\"\<CommitRecords\>\"", "]"}], "=", 
            "commitRecs"}], ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"obj", "[", "\"\<CommitRecords\>\"", "]"}]}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\n", 
   RowBox[{
   "(*", "*********************************************************)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Template", " ", "Method", " ", "for", " ", "\"\<Plot\>\""}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
   "(*", "*********************************************************)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"GitHubDataHEAD", "=", "GitHubData"}], ";"}], "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"GitHubData", "[", 
       RowBox[{"{", 
        RowBox[{"objID_", ",", "user_String", ",", "project_String"}], "}"}], 
       "]"}], "[", 
      RowBox[{"\"\<TickLabels\>\"", "[", "]"}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"obj", "=", 
          RowBox[{"GitHubDataHEAD", "[", 
           RowBox[{"{", 
            RowBox[{"objID", ",", "user", ",", "project"}], "}"}], "]"}]}], 
         ",", "commitRecs", ",", "tickLabels"}], "}"}], ",", 
       RowBox[{
        RowBox[{"commitRecs", "=", 
         RowBox[{"obj", "[", 
          RowBox[{"\"\<ParseData\>\"", "[", "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"tickLabels", "=", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<message\>\"", ",", 
            RowBox[{"Style", "[", 
             RowBox[{"\"\<committer\>\"", ",", 
              RowBox[{"GrayLevel", "[", "0.7", "]"}]}], "]"}], ",", 
            RowBox[{"Style", "[", 
             RowBox[{"\"\<date\>\"", ",", 
              RowBox[{"GrayLevel", "[", "0.8", "]"}]}], "]"}]}], "}"}], "/.", 
          " ", "commitRecs"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"tickLabels", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "1"}], "]"}], "]"}], "=", 
         RowBox[{
          RowBox[{
           RowBox[{"StringReplace", "[", 
            RowBox[{"#", ",", 
             RowBox[{"WhitespaceCharacter", "->", "\"\< \>\""}]}], "]"}], 
           "&"}], "/@", 
          RowBox[{"tickLabels", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "1"}], "]"}], "]"}]}]}], ";", 
        "\[IndentingNewLine]", "tickLabels"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"GitHubData", "[", 
       RowBox[{"{", 
        RowBox[{"objID_", ",", "user_String", ",", "project_String"}], "}"}], 
       "]"}], "[", 
      RowBox[{"\"\<DatePoints\>\"", "[", "]"}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"obj", "=", 
          RowBox[{"GitHubDataHEAD", "[", 
           RowBox[{"{", 
            RowBox[{"objID", ",", "user", ",", "project"}], "}"}], "]"}]}], 
         ",", "commitRecs"}], "}"}], ",", 
       RowBox[{
        RowBox[{"commitRecs", "=", 
         RowBox[{"obj", "[", 
          RowBox[{"\"\<ParseData\>\"", "[", "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"MapThread", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"AbsoluteTime", "[", 
              RowBox[{"DateList", "[", "#1", "]"}], "]"}], ",", "#2"}], "}"}],
            "&"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"\"\<date\>\"", "/.", " ", "commitRecs"}], ",", 
            RowBox[{"Range", "[", 
             RowBox[{"Length", "[", "commitRecs", "]"}], "]"}]}], "}"}]}], 
         "]"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"GitHubData", "[", 
       RowBox[{"{", 
        RowBox[{"objID_", ",", "user_String", ",", "project_String"}], "}"}], 
       "]"}], "[", 
      RowBox[{"\"\<Plot\>\"", "[", "opts___", "]"}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"obj", "=", 
          RowBox[{"GitHubDataHEAD", "[", 
           RowBox[{"{", 
            RowBox[{"objID", ",", "user", ",", "project"}], "}"}], "]"}]}], 
         ",", "commitRecs", ",", "tickLabels", ",", "datePoints"}], "}"}], 
       ",", 
       RowBox[{
        RowBox[{"commitRecs", "=", 
         RowBox[{"obj", "[", 
          RowBox[{"\"\<ParseData\>\"", "[", "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"tickLabels", "=", 
         RowBox[{"obj", "[", 
          RowBox[{"\"\<TickLabels\>\"", "[", "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"datePoints", "=", 
         RowBox[{"obj", "[", 
          RowBox[{"\"\<DatePoints\>\"", "[", "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"obj", "[", "\"\<PlotFunction\>\"", "]"}], "[", 
         RowBox[{"datePoints", ",", "tickLabels", ",", "opts"}], "]"}]}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
   "(*", "*********************************************************)"}], "\n", 
   RowBox[{"(*", 
    RowBox[{"Plot", " ", "strategies"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
   "(*", "*********************************************************)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"GHDDateListPlot", "[", 
      RowBox[{"datePoints_", ",", "tickLabels_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"DateListPlot", "[", 
      RowBox[{
       RowBox[{"MapThread", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Tooltip", "[", 
           RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
         RowBox[{"{", 
          RowBox[{"datePoints", ",", "tickLabels"}], "}"}]}], "]"}], ",", 
       "opts", ",", 
       RowBox[{"Joined", "->", "False"}], ",", 
       RowBox[{"PlotStyle", "->", 
        RowBox[{"{", 
         RowBox[{"PointSize", "[", "0.03", "]"}], "}"}]}], ",", 
       RowBox[{"PlotRange", "->", "All"}], ",", 
       RowBox[{"AspectRatio", "->", "2"}], ",", 
       RowBox[{"ImageSize", "->", 
        RowBox[{"{", 
         RowBox[{"Automatic", ",", "800"}], "}"}]}], ",", 
       RowBox[{"GridLines", "->", 
        RowBox[{"{", 
         RowBox[{"None", ",", "Automatic"}], "}"}]}], ",", 
       RowBox[{"FrameTicks", "->", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"Automatic", ",", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"i", ",", 
                RowBox[{"Style", "[", 
                 RowBox[{
                  RowBox[{"tickLabels", "[", 
                   RowBox[{"[", "i", "]"}], "]"}], ",", 
                  RowBox[{"FontSize", "->", "14"}]}], "]"}]}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", "1", ",", 
                RowBox[{"Length", "[", "tickLabels", "]"}]}], "}"}]}], 
             "]"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"Automatic", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
       RowBox[{"FrameLabel", "->", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<commit order\>\"", ",", "None"}], "}"}], ",", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}], " ", "\"\<date\>\""}]}], 
         "}"}]}]}], "]"}]}], ";"}], "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"GHDBarChart", "[", 
      RowBox[{"datePoints_", ",", "tickLabels_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"distancesFromNow", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"DateDifference", "[", 
             RowBox[{
              RowBox[{"DateList", "[", "#", "]"}], ",", 
              RowBox[{"Date", "[", "]"}]}], "]"}], "&"}], ",", 
           RowBox[{"datePoints", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "1"}], "]"}], "]"}]}], "]"}]}], "}"}], ",", 
       RowBox[{"BarChart", "[", 
        RowBox[{"distancesFromNow", ",", "opts", ",", 
         RowBox[{"BarOrigin", "->", "Right"}], ",", 
         RowBox[{"BarSpacing", "->", "0.5"}], ",", 
         RowBox[{
         "ChartElementFunction", "->", "\"\<GradientScaleRectangle\>\""}], 
         ",", 
         RowBox[{"Frame", "->", "True"}], ",", 
         RowBox[{"GridLines", "->", "Automatic"}], ",", 
         RowBox[{"Method", "->", 
          RowBox[{"{", 
           RowBox[{"\"\<GridLinesInFront\>\"", "->", "True"}], "}"}]}], ",", 
         RowBox[{"PlotRangePadding", "->", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"None", ",", "0.5"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"None", ",", "0.3"}], "}"}]}], "}"}]}], ",", 
         RowBox[{"FrameLabel", "->", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"\"\<commit order\>\"", ",", "None"}], "}"}], ",", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"1", ",", "1"}], "}"}], " ", 
             "\"\<number of days\>\""}]}], "}"}]}], ",", 
         RowBox[{"FrameTicks", "->", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"Automatic", ",", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"i", ",", 
                  RowBox[{"Style", "[", 
                   RowBox[{
                    RowBox[{"tickLabels", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", 
                    RowBox[{"FontSize", "->", "14"}]}], "]"}]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"i", ",", "1", ",", 
                  RowBox[{"Length", "[", "tickLabels", "]"}]}], "}"}]}], 
               "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"Automatic", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
         RowBox[{"AspectRatio", "->", "3"}], ",", 
         RowBox[{"ImageSize", "->", 
          RowBox[{"{", 
           RowBox[{"Automatic", ",", "700"}], "}"}]}]}], "]"}]}], "]"}]}], 
    ";"}], "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"GHDGraphics3D", "[", 
      RowBox[{"datePoints_", ",", "tickLabels_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"distancesFromNow", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"DateDifference", "[", 
              RowBox[{
               RowBox[{"DateList", "[", "#", "]"}], ",", 
               RowBox[{"Date", "[", "]"}]}], "]"}], "&"}], ",", 
            RowBox[{"datePoints", "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "1"}], "]"}], "]"}]}], "]"}]}], ",", 
         RowBox[{"committers", "=", 
          RowBox[{"Union", "[", 
           RowBox[{"tickLabels", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}]}], ",", 
         "committersAssoc"}], "}"}], ",", 
       RowBox[{
        RowBox[{"committersAssoc", "=", 
         RowBox[{"AssociationThread", "[", 
          RowBox[{"committers", ",", 
           RowBox[{"Range", "[", 
            RowBox[{"Length", "[", "committers", "]"}], "]"}]}], "]"}]}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"Graphics3D", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"Pink", ",", 
            RowBox[{"PointSize", "[", "0.03", "]"}], ",", 
            RowBox[{"Point", "[", 
             RowBox[{"MapThread", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"#1", ",", 
                  RowBox[{"committersAssoc", "[", "#2", "]"}], ",", "#3"}], 
                 "}"}], "&"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"distancesFromNow", "[", 
                  RowBox[{"[", 
                   RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
                 RowBox[{"tickLabels", "[", 
                  RowBox[{"[", 
                   RowBox[{"All", ",", "2"}], "]"}], "]"}], ",", 
                 RowBox[{"datePoints", "[", 
                  RowBox[{"[", 
                   RowBox[{"All", ",", "2"}], "]"}], "]"}]}], "}"}]}], "]"}], 
             "]"}], ",", 
            RowBox[{"GrayLevel", "[", "0.5", "]"}], ",", 
            RowBox[{"Line", "[", 
             RowBox[{"MapThread", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"#1", ",", 
                  RowBox[{"committersAssoc", "[", "#2", "]"}], ",", "#3"}], 
                 "}"}], "&"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"distancesFromNow", "[", 
                  RowBox[{"[", 
                   RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
                 RowBox[{"tickLabels", "[", 
                  RowBox[{"[", 
                   RowBox[{"All", ",", "2"}], "]"}], "]"}], ",", 
                 RowBox[{"datePoints", "[", 
                  RowBox[{"[", 
                   RowBox[{"All", ",", "2"}], "]"}], "]"}]}], "}"}]}], "]"}], 
             "]"}]}], "}"}], ",", "opts", ",", 
          RowBox[{"BoxRatios", "->", 
           RowBox[{"{", 
            RowBox[{"1", ",", "1", ",", "4"}], "}"}]}], ",", 
          RowBox[{"FaceGrids", "->", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"0", ",", "0", ",", 
               RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], ",", 
          RowBox[{"Axes", "->", "True"}], ",", 
          RowBox[{"AxesLabel", "->", 
           RowBox[{"{", 
            RowBox[{
            "\"\<number of days ago\>\"", ",", "\"\<committer\>\"", ",", 
             "\"\<commit order\>\""}], "}"}]}], ",", 
          RowBox[{"Ticks", "->", 
           RowBox[{"{", 
            RowBox[{"Automatic", ",", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"i", ",", 
                 RowBox[{"committers", "[", 
                  RowBox[{"[", "i", "]"}], "]"}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"i", ",", "1", ",", 
                 RowBox[{"Length", "[", "committers", "]"}]}], "}"}]}], "]"}],
              ",", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"i", ",", 
                 RowBox[{"Style", "[", 
                  RowBox[{
                   RowBox[{"tickLabels", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", ",", "1"}], "]"}], "]"}], ",", 
                   RowBox[{"FontSize", "->", "14"}]}], "]"}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"i", ",", "1", ",", 
                 RowBox[{"Length", "[", "tickLabels", "]"}]}], "}"}]}], 
              "]"}]}], "}"}]}]}], "]"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
   "(*", "*********************************************************)"}], "\n", 
   RowBox[{"(*", 
    RowBox[{"Other", " ", "methods"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
   "(*", "*********************************************************)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"GitHubData", "[", 
       RowBox[{"{", 
        RowBox[{"objID_", ",", "user_String", ",", "project_String"}], "}"}], 
       "]"}], "[", 
      RowBox[{"\"\<Dataset\>\"", "[", "]"}], "]"}], ":=", 
     RowBox[{"Dataset", "[", 
      RowBox[{"Association", "/@", 
       RowBox[{
        RowBox[{"GitHubData", "[", 
         RowBox[{"{", 
          RowBox[{"objID", ",", "user", ",", "project"}], "}"}], "]"}], "[", 
        "\"\<CommitRecords\>\"", "]"}]}], "]"}]}], ";"}], "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"GitHubData", "[", 
       RowBox[{"{", 
        RowBox[{"objID_", ",", "user_String", ",", "project_String"}], "}"}], 
       "]"}], "[", 
      RowBox[{"\"\<DatasetExtended\>\"", "[", "]"}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"datePoints", ",", "extendedRules"}], "}"}], ",", 
       RowBox[{
        RowBox[{"datePoints", "=", 
         RowBox[{
          RowBox[{"GitHubData", "[", 
           RowBox[{"{", 
            RowBox[{"objID", ",", "user", ",", "project"}], "}"}], "]"}], "[", 
          RowBox[{"\"\<DatePoints\>\"", "[", "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"extendedRules", "=", 
         RowBox[{"Thread", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"GitHubData", "[", 
              RowBox[{"{", 
               RowBox[{"objID", ",", "user", ",", "project"}], "}"}], "]"}], 
             "[", 
             RowBox[{"\"\<ParseData\>\"", "[", "]"}], "]"}], ",", 
            RowBox[{"Thread", "[", 
             RowBox[{"\"\<datePoint\>\"", "->", "datePoints"}], "]"}], ",", 
            RowBox[{"\"\<project\>\"", "->", "project"}]}], "}"}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"Dataset", "[", 
         RowBox[{"Association", "/@", "extendedRules"}], "]"}]}]}], "]"}]}], 
    ";"}], "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"GitHubData", "[", 
       RowBox[{"{", 
        RowBox[{"objID_", ",", "user_String", ",", "project_String"}], "}"}], 
       "]"}], "[", 
      RowBox[{"\"\<ReferenceGraph\>\"", "[", "]"}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"graphRules", ",", "commitsGraph"}], "}"}], ",", 
       RowBox[{
        RowBox[{"graphRules", "=", 
         RowBox[{"Flatten", "@", 
          RowBox[{"Map", "[", 
           RowBox[{"Thread", ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"\"\<parentSha\>\"", "->", "\"\<sha\>\""}], ")"}], "/.",
              "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"GitHubData", "[", 
               RowBox[{"{", 
                RowBox[{"objID", ",", "user", ",", "project"}], "}"}], "]"}], 
              "[", 
              RowBox[{"\"\<ParseData\>\"", "[", "]"}], "]"}]}]}], "]"}]}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"commitsGraph", "=", 
         RowBox[{"Graph", "[", 
          RowBox[{"DirectedEdge", "@@@", "graphRules"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "commitsGraph"}]}], "]"}]}], ";"}], "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"GitHubData", "[", 
       RowBox[{"{", 
        RowBox[{"objID_", ",", "user_String", ",", "project_String"}], "}"}], 
       "]"}], "[", 
      RowBox[{"\"\<User\>\"", "[", "]"}], "]"}], ":=", "user"}], ";"}], "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"GitHubData", "[", 
       RowBox[{"{", 
        RowBox[{"objID_", ",", "user_String", ",", "project_String"}], "}"}], 
       "]"}], "[", 
      RowBox[{"\"\<Project\>\"", "[", "]"}], "]"}], ":=", "project"}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
   "(*", "*********************************************************)"}], "\n", 
   RowBox[{"(*", "GitHubDataDecorators", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
   "(*", "*********************************************************)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"Clear", "[", 
    RowBox[{
    "GitHubDataComponent", ",", "GitHubDataDecorator", ",", 
     "GitHubDataColorFunctionDecorator"}], "]"}], "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"GitHubDataComponentHEAD", "=", "GitHubDataComponent"}], ";"}], 
   "\n", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"GitHubDataComponent", "[", 
       RowBox[{"{", 
        RowBox[{"objID_", ",", "user_String", ",", "project_String"}], "}"}], 
       "]"}], "[", 
      RowBox[{"\"\<Plot\>\"", "[", "opts___", "]"}], "]"}], ":=", 
     RowBox[{"Print", "[", "\"\<Error\>\"", "]"}]}], ";"}], "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"GitHubDataDecorator", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"objID_", ",", "user_String", ",", "project_String"}], "}"}],
         ",", "component_"}], "]"}], "[", "s_", "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"GitHubDataComponentHEAD", "=", "GitHubDataDecorator"}], 
        "}"}], ",", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<Decorator abstract component call. Head[component]=\>\"", ",", 
           RowBox[{"Head", "[", "component", "]"}]}], "]"}], ";"}], "*)"}], 
       RowBox[{"(*", 
        RowBox[{"Use", " ", 
         RowBox[{
          RowBox[{"GitHubDataComponent", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"objID", ",", "user", ",", "project"}], "}"}], ",", 
            "component"}], "]"}], "[", "s", "]"}], " ", "in", " ", "the", " ",
          "concrete", " ", 
         RowBox[{"decorators", "."}]}], "*)"}], 
       RowBox[{"component", "[", "s", "]"}]}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"GitHubDataDecorator", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"objID_", ",", "user_String", ",", "project_String"}], "}"}],
         ",", "component_"}], "]"}], "[", 
      RowBox[{"\"\<Plot\>\"", "[", "opts___", "]"}], "]"}], ":=", 
     RowBox[{"component", "[", 
      RowBox[{"\"\<Plot\>\"", "[", "opts", "]"}], "]"}]}], ";"}], "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"GitHubDataColorFunctionDecorator", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"objID_", ",", "user_String", ",", "project_String"}], "}"}],
         ",", "component_"}], "]"}], "[", "s_", "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "GitHubDataComponentHEAD", "=", "GitHubDataColorFunctionDecorator"}], 
        "}"}], ",", 
       RowBox[{
        RowBox[{"GitHubDataDecorator", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"objID", ",", "user", ",", "project"}], "}"}], ",", 
          "component"}], "]"}], "[", "s", "]"}]}], "]"}]}], ";"}], "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"GitHubDataColorFunctionDecorator", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"objID_", ",", "user_String", ",", "project_String"}], "}"}],
         ",", "component_"}], "]"}], "[", 
      RowBox[{"\"\<Plot\>\"", "[", "opts___", "]"}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"obj", "=", 
          RowBox[{"GitHubDataDecorator", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"objID", ",", "user", ",", "project"}], "}"}], ",", 
            "component"}], "]"}]}], ",", "gr", ",", "commitRecs", ",", 
         "datePoints", ",", "colorFunc", ",", "pSize"}], "}"}], ",", 
       RowBox[{
        RowBox[{"gr", "=", 
         RowBox[{"obj", "[", 
          RowBox[{"\"\<Plot\>\"", "[", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"{", "opts", "}"}], ",", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"PointSize", "->", "_"}], ")"}], "|", 
              RowBox[{"(", 
               RowBox[{"\"\<DecoratorColorFunction\>\"", "->", "_"}], 
               ")"}]}]}], "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"get", " ", "option", " ", "values"}], "*)"}], 
        RowBox[{"colorFunc", "=", 
         RowBox[{"OptionValue", "[", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"{", "opts", "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"\"\<DecoratorColorFunction\>\"", "->", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Blend", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"Black", ",", "Red"}], "}"}], ",", "#"}], "]"}], 
                 "&"}], ")"}]}], "}"}]}], "]"}], ",", 
           "\"\<DecoratorColorFunction\>\""}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"pSize", "=", 
         RowBox[{"OptionValue", "[", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"{", "opts", "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"PointSize", "->", "0.015"}], "}"}]}], "]"}], ",", 
           "PointSize"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"decorate", " ", "the", " ", "tick", " ", "labels"}], "*)"}], 
        RowBox[{"gr", "=", 
         RowBox[{"gr", "/.", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"GrayLevel", "[", "x_", "]"}], ":>", 
            RowBox[{"colorFunc", "[", "x", "]"}]}], "}"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"decorate", " ", "the", " ", "graphics"}], "*)"}], 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"obj", "[", "\"\<PlotFunction\>\"", "]"}], "===", 
           "GHDDateListPlot"}], ",", 
          RowBox[{
           RowBox[{"commitRecs", "=", 
            RowBox[{"obj", "[", 
             RowBox[{"\"\<ParseData\>\"", "[", "]"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"datePoints", "=", 
            RowBox[{"obj", "[", 
             RowBox[{"\"\<DatePoints\>\"", "[", "]"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"gr", "=", 
            RowBox[{"Show", "[", 
             RowBox[{"{", 
              RowBox[{"gr", ",", 
               RowBox[{"Graphics", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"colorFunc", "[", "0.2", "]"}], ",", 
                  RowBox[{"Line", "[", "datePoints", "]"}], ",", 
                  RowBox[{"colorFunc", "[", "1", "]"}], ",", 
                  RowBox[{"PointSize", "[", "pSize", "]"}], ",", 
                  RowBox[{"Point", "[", "datePoints", "]"}]}], "}"}], "]"}]}],
               "}"}], "]"}]}]}]}], "]"}], ";", "\[IndentingNewLine]", 
        "gr"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
   "(*", "*********************************************************)"}], "\n", 
   RowBox[{"(*", "GitHubDataMessageHyperlinks", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
   "(*", "*********************************************************)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"GitHubDataMessageHyperlinks", "[", 
       RowBox[{"{", 
        RowBox[{"objID_", ",", "user_String", ",", "project_String"}], "}"}], 
       "]"}], "[", "s_", "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"GitHubDataHEAD", "=", "GitHubDataMessageHyperlinks"}], "}"}],
        ",", 
       RowBox[{
        RowBox[{"GitHubData", "[", 
         RowBox[{"{", 
          RowBox[{"objID", ",", "user", ",", "project"}], "}"}], "]"}], "[", 
        "s", "]"}]}], "]"}]}], ";"}], "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"GitHubDataMessageHyperlinks", "[", 
       RowBox[{"{", 
        RowBox[{"objID_", ",", "user_String", ",", "project_String"}], "}"}], 
       "]"}], "[", 
      RowBox[{"\"\<TickLabels\>\"", "[", "]"}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", "tickLabels", "}"}], ",", 
       RowBox[{
        RowBox[{"tickLabels", "=", 
         RowBox[{
          RowBox[{"GitHubData", "[", 
           RowBox[{"{", 
            RowBox[{"objID", ",", "user", ",", "project"}], "}"}], "]"}], "[", 
          RowBox[{"\"\<TickLabels\>\"", "[", "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"tickLabels", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "1"}], "]"}], "]"}], "=", 
         RowBox[{"MapThread", "[", 
          RowBox[{
           RowBox[{"Function", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"mess", ",", "url"}], "}"}], ",", 
             RowBox[{"Button", "[", 
              RowBox[{
               RowBox[{"Mouseover", "[", 
                RowBox[{
                 RowBox[{"Style", "[", 
                  RowBox[{"mess", ",", "\"\<Text\>\""}], "]"}], ",", 
                 RowBox[{"Style", "[", 
                  RowBox[{"mess", ",", "\"\<HyperlinkActive\>\""}], "]"}]}], 
                "]"}], ",", 
               RowBox[{"NotebookLocate", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"URL", "[", "url", "]"}], ",", "None"}], "}"}], 
                "]"}], ",", 
               RowBox[{"Appearance", "->", "None"}]}], "]"}]}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"tickLabels", "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
             RowBox[{"\"\<htmlURL\>\"", "/.", " ", "commitRecs"}]}], "}"}]}], 
          "]"}]}], ";", "\[IndentingNewLine]", "tickLabels"}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
   "(*", "*********************************************************)"}], "\n", 
   RowBox[{"(*", "GitHubDataCommitPathsDecorator", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
   "(*", "*********************************************************)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"GitHubDataCommitPathsDecorator", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"objID_", ",", "user_String", ",", "project_String"}], "}"}],
         ",", "component_"}], "]"}], "[", "s_", "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "GitHubDataComponentHEAD", "=", "GitHubDataCommitPathsDecorator"}], 
        "}"}], ",", 
       RowBox[{
        RowBox[{"GitHubDataDecorator", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"objID", ",", "user", ",", "project"}], "}"}], ",", 
          "component"}], "]"}], "[", "s", "]"}]}], "]"}]}], ";"}], "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"GitHubDataCommitPathsDecorator", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"objID_", ",", "user_String", ",", "project_String"}], "}"}],
         ",", "component_"}], "]"}], "[", 
      RowBox[{"\"\<Plot\>\"", "[", "opts___", "]"}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"obj", "=", 
          RowBox[{"GitHubDataDecorator", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"objID", ",", "user", ",", "project"}], "}"}], ",", 
            "component"}], "]"}]}], ",", "gr", ",", "commitRecs", ",", 
         "graphRules", ",", "commitsGraph", ",", "roots", ",", "leaves", ",", 
         "paths", ",", "shaInds", ",", "pathsByInds", ",", "datePoints", ",", 
         RowBox[{"pointSize", "=", "0.03"}]}], "}"}], ",", 
       RowBox[{"(*", 
        RowBox[{"Base", " ", "plot"}], "*)"}], 
       RowBox[{
        RowBox[{"gr", "=", 
         RowBox[{"obj", "[", 
          RowBox[{"\"\<Plot\>\"", "[", "opts", "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
         "If", " ", "the", " ", "right", " ", "function", " ", "is", " ", 
          "used", " ", "decorate", " ", "it"}], "*)"}], 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"obj", "[", "\"\<PlotFunction\>\"", "]"}], "===", 
           "GHDDateListPlot"}], ",", 
          RowBox[{"(*", 
           RowBox[{"Make", " ", "a", " ", "commits", " ", "graph"}], "*)"}], 
          RowBox[{
           RowBox[{"commitRecs", "=", 
            RowBox[{"obj", "[", 
             RowBox[{"\"\<ParseData\>\"", "[", "]"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"graphRules", "=", 
            RowBox[{"Flatten", "@", 
             RowBox[{"Map", "[", 
              RowBox[{"Thread", ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"\"\<parentSha\>\"", "->", "\"\<sha\>\""}], ")"}], "/.",
                 " ", "commitRecs"}]}], "]"}]}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"commitsGraph", "=", 
            RowBox[{"Graph", "[", 
             RowBox[{"DirectedEdge", "@@@", "graphRules"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{"Find", " ", "paths"}], "*)"}], 
           RowBox[{"roots", "=", 
            RowBox[{
             RowBox[{"Select", "[", 
              RowBox[{"graphRules", ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"#", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "==", "\"\<none\>\""}], 
                "&"}]}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "2"}], "]"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"leaves", "=", 
            RowBox[{"Complement", "[", 
             RowBox[{
              RowBox[{"graphRules", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "2"}], "]"}], "]"}], ",", 
              RowBox[{"graphRules", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "1"}], "]"}], "]"}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"paths", "=", 
            RowBox[{"Flatten", "[", 
             RowBox[{
              RowBox[{"Outer", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"FindPath", "[", 
                  RowBox[{"commitsGraph", ",", "#1", ",", "#2", ",", 
                   RowBox[{"Length", "[", "commitRecs", "]"}], ",", "All"}], 
                  "]"}], "&"}], ",", "roots", ",", "leaves"}], "]"}], ",", 
              "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"paths", "=", 
            RowBox[{"SortBy", "[", 
             RowBox[{"paths", ",", 
              RowBox[{
               RowBox[{"-", 
                RowBox[{"Length", "[", "#", "]"}]}], "&"}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"shaInds", "=", 
            RowBox[{"AssociationThread", "[", 
             RowBox[{
              RowBox[{"\"\<sha\>\"", "/.", " ", "commitRecs"}], ",", 
              RowBox[{"Range", "[", 
               RowBox[{"Length", "[", "commitRecs", "]"}], "]"}]}], "]"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"pathsByInds", "=", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"shaInds", "/@", "#"}], "&"}], ",", "paths"}], "]"}]}],
            ";", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
            "Combine", " ", "the", " ", "base", " ", "plot", " ", "and", " ", 
             "with", " ", "the", " ", "paths", " ", "plot"}], "*)"}], 
           RowBox[{"datePoints", "=", 
            RowBox[{"obj", "[", 
             RowBox[{"\"\<DatePoints\>\"", "[", "]"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"gr", "=", 
            RowBox[{"Show", "[", 
             RowBox[{"gr", ",", 
              RowBox[{"Graphics", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Opacity", "[", "0.5", "]"}], ",", 
                 RowBox[{"Thickness", "[", "0.01", "]"}], ",", 
                 RowBox[{"MapThread", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ColorData", "[", "\"\<TemperatureMap\>\"", "]"}],
                     "[", "#2", "]"}], ",", 
                    RowBox[{"Mouseover", "[", 
                    RowBox[{
                    RowBox[{"Line", "[", 
                    RowBox[{"datePoints", "[", 
                    RowBox[{"[", "#1", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"Red", ",", 
                    RowBox[{"PointSize", "[", 
                    RowBox[{"pointSize", "*", "1.18"}], "]"}], ",", 
                    RowBox[{"Point", "[", 
                    RowBox[{"datePoints", "[", 
                    RowBox[{"[", "#1", "]"}], "]"}], "]"}]}], "}"}]}], 
                    "]"}]}], "}"}], "&"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"pathsByInds", ",", 
                    RowBox[{"RandomSample", "[", 
                    RowBox[{"Range", "[", 
                    RowBox[{"0", ",", "1", ",", 
                    RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", "pathsByInds", "]"}], "-", "1"}], 
                    ")"}]}]}], "]"}], "]"}]}], "}"}]}], "]"}], ",", 
                 RowBox[{"Opacity", "[", "1", "]"}], ",", "LightBlue", ",", 
                 RowBox[{"PointSize", "[", 
                  RowBox[{"pointSize", "*", "0.66"}], "]"}], ",", 
                 RowBox[{"MapThread", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Tooltip", "[", 
                    RowBox[{
                    RowBox[{"Point", "[", "#1", "]"}], ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"#2", ",", "\"\< \>\"", ",", 
                    RowBox[{"DateDifference", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"Date", "[", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Month\>\"", ",", "\"\<Day\>\"", ",", "\"\<Hour\>\"", 
                    ",", "\"\<Minute\>\""}], "}"}]}], "]"}], ",", 
                    "\"\< ago\>\""}], "}"}], "]"}]}], "]"}], "&"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"datePoints", ",", 
                    RowBox[{"\"\<sha\>\"", "/.", " ", "commitRecs"}]}], 
                    "}"}]}], "]"}]}], "}"}], "]"}]}], "]"}]}]}]}], "]"}], ";",
         "\[IndentingNewLine]", "gr"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\n", 
   RowBox[{
   "(*", "*********************************************************)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "GitHubDataComposite", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
   "(*", "*********************************************************)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"ClearAll", "[", 
    RowBox[{"GitHubDataCompositeComponent", ",", "GitHubDataComposite"}], 
    "]"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"The", " ", "Component"}], "*)"}], "\n", 
   RowBox[{
    RowBox[{
    "GitHubDataCompositeComponentHEAD", "=", "GitHubDataCompositeComponent"}],
     ";"}], "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"GitHubDataCompositeComponent", "[", 
       RowBox[{"objID_", ",", "children_"}], "]"}], "[", 
      RowBox[{"\"\<AddChild\>\"", "[", "newChild_", "]"}], "]"}], ":=", 
     RowBox[{"GitHubDataCompositeHEAD", "[", 
      RowBox[{"objID", ",", 
       RowBox[{"Append", "[", 
        RowBox[{"children", ",", "newChild"}], "]"}]}], "]"}]}], ";"}], "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"GitHubDataCompositeComponent", "[", 
       RowBox[{"objID_", ",", "children_"}], "]"}], "[", 
      RowBox[{"\"\<GetChild\>\"", "[", "childIndex_", "]"}], "]"}], ":=", 
     RowBox[{"children", "[", 
      RowBox[{"[", "childIndex", "]"}], "]"}]}], ";"}], "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"GitHubDataCompositeComponent", "[", 
       RowBox[{"objID_", ",", "children_"}], "]"}], "[", 
      RowBox[{"\"\<GetChildren\>\"", "[", "]"}], "]"}], ":=", "children"}], 
    ";"}], "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"GitHubDataCompositeComponent", "[", 
       RowBox[{"objID_", ",", "children_"}], "]"}], "[", 
      RowBox[{"\"\<Plot\>\"", "[", "___", "]"}], "]"}], ":="}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
     "Print", "[", 
      "\"\<Error: GitHubDataCompositeComponent is an abstract class.\>\"", 
      "]"}], ";"}], "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"GitHubDataCompositeComponent", "[", 
       RowBox[{"objID_", ",", "children_"}], "]"}], "[", "s_", "]"}], ":=", 
     RowBox[{
     "Print", "[", 
      "\"\<Error: GitHubDataCompositeComponent is an abstract class.\>\"", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"The", " ", "Composite"}], "*)"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"GitHubDataComposite", "[", 
       RowBox[{"objID_", ",", "children_"}], "]"}], "[", 
      RowBox[{"\"\<AddChild\>\"", "[", "newChild_", "]"}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "GitHubDataCompositeComponentHEAD", "=", "GitHubDataComposite"}], 
        "}"}], ",", 
       RowBox[{
        RowBox[{"GitHubDataCompositeComponent", "[", 
         RowBox[{"objID", ",", "children"}], "]"}], "[", 
        RowBox[{"\"\<AddChild\>\"", "[", "newChild", "]"}], "]"}]}], "]"}]}], 
    ";"}], "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"GitHubDataComposite", "[", 
       RowBox[{"objID_", ",", "children_"}], "]"}], "[", 
      RowBox[{"\"\<GetChild\>\"", "[", "childIndex_", "]"}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "GitHubDataCompositeComponentHEAD", "=", "GitHubDataComposite"}], 
        "}"}], ",", 
       RowBox[{
        RowBox[{"GitHubDataCompositeComponent", "[", 
         RowBox[{"objID", ",", "children"}], "]"}], "[", 
        RowBox[{"\"\<GetChild\>\"", "[", "childIndex", "]"}], "]"}]}], 
      "]"}]}], ";"}], "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"GitHubDataComposite", "[", 
       RowBox[{"objID_", ",", "children_"}], "]"}], "[", 
      RowBox[{"\"\<GetChildren\>\"", "[", "]"}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "GitHubDataCompositeComponentHEAD", "=", "GitHubDataComposite"}], 
        "}"}], ",", 
       RowBox[{
        RowBox[{"GitHubDataCompositeComponent", "[", 
         RowBox[{"objID", ",", "children"}], "]"}], "[", 
        RowBox[{"\"\<GetChildren\>\"", "[", "]"}], "]"}]}], "]"}]}], ";"}], 
   "\n", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"GitHubDataComposite", "[", 
        RowBox[{"objID_", ",", "children_"}], "]"}], "[", "s_", "]"}], ":=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "[", "s", "]"}], "&"}], ",", "children"}], "]"}]}], 
     ";"}], "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"GitHubDataComposite", "[", 
       RowBox[{"objID_", ",", "children_"}], "]"}], "[", 
      RowBox[{"\"\<Plot\>\"", "[", "opts___", "]"}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"plots", ",", "ranges", ",", "glRange"}], "}"}], ",", 
       RowBox[{
        RowBox[{"plots", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "[", 
             RowBox[{"\"\<Plot\>\"", "[", "opts", "]"}], "]"}], "&"}], ",", 
           "children"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "Instead", " ", "of", " ", "relying", " ", "on", " ", "the", " ", 
           "PlotRange", " ", "specifications", " ", "in", " ", "the", " ", 
           "plots", " ", "we", " ", "can", " ", "use", " ", "these"}], 
          "..."}], "*)"}], 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"allDatePoints", "=", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"\"\<DatePoints\>\"", "[", "]"}], "]"}], "&"}], ",", 
             "children"}], "]"}]}], ";"}], "*)"}], 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"dateRange", "=", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Min", "[", 
              RowBox[{"Flatten", "[", 
               RowBox[{"allDatePoints", "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "All", ",", "1"}], "]"}], "]"}], "]"}], 
              "]"}], ",", 
             RowBox[{"Max", "[", 
              RowBox[{"Flatten", "[", 
               RowBox[{"allDatePoints", "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "All", ",", "1"}], "]"}], "]"}], "]"}], 
              "]"}]}], "}"}]}], ";"}], "*)"}], 
        RowBox[{"ranges", "=", 
         RowBox[{"Cases", "[", 
          RowBox[{"plots", ",", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"PlotRange", "->", "x_"}], ")"}], ":>", "x"}], ",", 
           "Infinity"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"glRange", "=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Min", "[", 
              RowBox[{"ranges", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], ",", 
             RowBox[{"Max", "[", 
              RowBox[{"ranges", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Min", "[", 
              RowBox[{"ranges", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}], ",", 
             RowBox[{"Max", "[", 
              RowBox[{"ranges", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}]}], "}"}]}], 
          "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"plots", "/.", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"PlotRange", "->", "x_"}], ")"}], "->", 
          RowBox[{"(", 
           RowBox[{"PlotRange", "->", "glRange"}], ")"}]}]}]}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"GitHubDataComposite", "[", 
       RowBox[{"objID_", ",", "children_"}], "]"}], "[", 
      RowBox[{"\"\<Plot3D\>\"", "[", "opts___", "]"}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "colorFunc", ",", "pSize", ",", "projectPlanesQ", ",", 
         "subsetQueryFunc", ",", "subsetLinesQ", ",", "optsRest", ",", 
         "subsetPlotStyle", ",", "globalTimeOrderQ", ",", "ghsDatePoints", 
         ",", "projects", ",", "projectToCoordRules", ",", "ghsDate3DPoints", 
         ",", "projectColors", ",", "grPrism", ",", "projectPlanes", ",", 
         "ghsExtDs", ",", "crossQueryPoints", ",", "dateRange", ",", "t"}], 
        "}"}], ",", 
       RowBox[{"(*", 
        RowBox[{"get", " ", "option", " ", "values"}], "*)"}], 
       RowBox[{
        RowBox[{"colorFunc", "=", 
         RowBox[{"OptionValue", "[", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"{", "opts", "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"ColorFunction", "->", 
               RowBox[{"ColorData", "[", 
                RowBox[{
                "\"\<SouthwestColors\>\"", ",", "\"\<ColorFunction\>\""}], 
                "]"}]}], "}"}]}], "]"}], ",", "ColorFunction"}], "]"}]}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"pSize", "=", 
         RowBox[{"OptionValue", "[", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"{", "opts", "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"PointSize", "->", "0.015"}], "}"}]}], "]"}], ",", 
           "PointSize"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"projectPlanesQ", "=", 
         RowBox[{"OptionValue", "[", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"{", "opts", "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"\"\<ProjectPlanes\>\"", "->", "True"}], "}"}]}], "]"}],
            ",", "\"\<ProjectPlanes\>\""}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"subsetQueryFunc", "=", 
         RowBox[{"OptionValue", "[", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"{", "opts", "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"\"\<SubsetQueryFunction\>\"", "->", "None"}], "}"}]}], 
            "]"}], ",", "\"\<SubsetQueryFunction\>\""}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"subsetLinesQ", "=", 
         RowBox[{"OptionValue", "[", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"{", "opts", "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"\"\<SubsetLines\>\"", "->", "False"}], "}"}]}], "]"}], 
           ",", "\"\<SubsetLines\>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"subsetPlotStyle", "=", 
         RowBox[{"OptionValue", "[", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"{", "opts", "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"\"\<SubsetPlotStyle\>\"", "->", 
               RowBox[{"{", "}"}]}], "}"}]}], "]"}], ",", 
           "\"\<SubsetPlotStyle\>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"globalTimeOrderQ", "=", 
         RowBox[{"OptionValue", "[", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"{", "opts", "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"\"\<GlobalTimeOrder\>\"", "->", "True"}], "}"}]}], 
            "]"}], ",", "\"\<GlobalTimeOrder\>\""}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"optsRest", "=", 
         RowBox[{"Select", "[", 
          RowBox[{
           RowBox[{"{", "opts", "}"}], ",", 
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Options", "[", "Graphics3D", "]"}], "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "&"}]}], "]"}]}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"ghsDatePoints", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "[", 
             RowBox[{"\"\<DatePoints\>\"", "[", "]"}], "]"}], "&"}], ",", 
           "children"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"projects", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "[", 
             RowBox[{"\"\<Project\>\"", "[", "]"}], "]"}], "&"}], ",", 
           "children"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"projectToCoordRules", "=", 
         RowBox[{"Thread", "[", 
          RowBox[{"projects", "->", 
           RowBox[{"Range", "[", 
            RowBox[{"Length", "[", "projects", "]"}], "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"ghsDate3DPoints", "=", 
         RowBox[{"MapThread", "[", 
          RowBox[{
           RowBox[{"Function", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"dps", ",", "p"}], "}"}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"Riffle", "[", 
                RowBox[{"#", ",", "p"}], "]"}], "&"}], "/@", "dps"}]}], "]"}],
            ",", 
           RowBox[{"{", 
            RowBox[{"ghsDatePoints", ",", 
             RowBox[{"projects", "/.", "projectToCoordRules"}]}], "}"}]}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"globalTimeOrderQ", ",", 
          RowBox[{
           RowBox[{"t", "=", 
            RowBox[{"SortBy", "[", 
             RowBox[{
              RowBox[{"Flatten", "[", 
               RowBox[{"ghsDate3DPoints", ",", "1"}], "]"}], ",", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "&"}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"t", "=", 
            RowBox[{"Dispatch", "[", 
             RowBox[{"MapIndexed", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"#1", "->", 
                 RowBox[{"Append", "[", 
                  RowBox[{
                   RowBox[{"#1", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ";;", "2"}], "]"}], "]"}], ",", 
                   RowBox[{"#2", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], "&"}], ",", 
               "t"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"ghsDate3DPoints", "=", 
            RowBox[{"ghsDate3DPoints", "/.", " ", "t"}]}], ";"}]}], "]"}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"projectColors", "=", 
         RowBox[{"colorFunc", "/@", 
          RowBox[{"Rescale", "[", 
           RowBox[{
            RowBox[{"Range", "[", 
             RowBox[{"Length", "[", "children", "]"}], "]"}], "/", 
            RowBox[{"Length", "[", "children", "]"}]}], "]"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"TrueQ", "[", "projectPlanesQ", "]"}], ",", 
          RowBox[{"projectPlanes", "=", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"InfinitePlane", "[", 
               RowBox[{"Through", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"First", ",", "Last", ",", "Mean"}], "}"}], "[", 
                 "#", "]"}], "]"}], "]"}], "&"}], ",", "ghsDate3DPoints"}], 
            "]"}]}], ",", 
          RowBox[{"projectPlanes", "=", 
           RowBox[{"{", "}"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"TrueQ", "[", 
           RowBox[{"subsetQueryFunc", "=!=", "None"}], "]"}], ",", 
          RowBox[{
           RowBox[{"ghsExtDs", "=", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"\"\<DatasetExtended\>\"", "[", "]"}], "]"}], "&"}], 
              ",", "children"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"crossQueryPoints", "=", 
            RowBox[{"Flatten", "[", 
             RowBox[{
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Flatten", "/@", 
                  RowBox[{"Values", "[", 
                   RowBox[{"Normal", "[", "#", "]"}], "]"}]}], "&"}], ",", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{
                    RowBox[{"Select", "[", "subsetQueryFunc", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"\<datePoint\>\"", ",", "\"\<project\>\""}], 
                    "}"}]}], "]"}], "/.", " ", "projectToCoordRules"}], "&"}],
                   ",", "ghsExtDs"}], "]"}]}], "]"}], ",", "1"}], "]"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"crossQueryPoints", "=", 
            RowBox[{"crossQueryPoints", "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", 
               RowBox[{"{", 
                RowBox[{"1", ",", "3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{"globalTimeOrderQ", ",", 
             RowBox[{"crossQueryPoints", "=", 
              RowBox[{"crossQueryPoints", "/.", " ", "t"}]}]}], "]"}], 
           ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"dateRange", "=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Min", "[", 
            RowBox[{"Flatten", "[", 
             RowBox[{"ghsDate3DPoints", "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", "All", ",", "1"}], "]"}], "]"}], "]"}], 
            "]"}], ",", 
           RowBox[{"Max", "[", 
            RowBox[{"Flatten", "[", 
             RowBox[{"ghsDate3DPoints", "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", "All", ",", "1"}], "]"}], "]"}], "]"}], 
            "]"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"grPrism", "=", 
         RowBox[{"Graphics3D", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Lighting", "->", "\"\<Neutral\>\""}], ",", 
             RowBox[{"Opacity", "[", "0.07", "]"}], ",", "projectPlanes", ",", 
             RowBox[{"Lighting", "->", "Automatic"}], ",", 
             RowBox[{"Opacity", "[", "0.9", "]"}], ",", 
             RowBox[{"MapThread", "[", 
              RowBox[{
               RowBox[{"Function", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"dps", ",", "col"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"col", ",", 
                   RowBox[{"Line", "[", "dps", "]"}]}], "}"}]}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"ghsDate3DPoints", ",", "projectColors"}], "}"}]}], 
              "]"}], ",", 
             RowBox[{"PointSize", "[", "pSize", "]"}], ",", 
             RowBox[{"MapThread", "[", 
              RowBox[{
               RowBox[{"Function", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"dps", ",", "col"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"col", ",", 
                   RowBox[{"Point", "[", "dps", "]"}]}], "}"}]}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"ghsDate3DPoints", ",", "projectColors"}], "}"}]}], 
              "]"}], ",", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"TrueQ", "[", 
                RowBox[{"subsetQueryFunc", "===", "None"}], "]"}], ",", 
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"PointSize", "[", 
                  RowBox[{"pSize", "*", "1.1"}], "]"}], ",", "Red", ",", 
                 RowBox[{"Arrowheads", "[", 
                  RowBox[{"10", "^", 
                   RowBox[{"-", 
                    RowBox[{"Log", "[", 
                    RowBox[{"9", ",", 
                    RowBox[{"Abs", "[", 
                    RowBox[{"Subtract", "@@", "dateRange"}], "]"}]}], 
                    "]"}]}]}], "]"}], ",", 
                 RowBox[{"Sequence", "@@", "subsetPlotStyle"}], ",", 
                 RowBox[{"Point", "[", "crossQueryPoints", "]"}], ",", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"TrueQ", "[", "subsetLinesQ", "]"}], ",", 
                   RowBox[{"Arrow", "/@", 
                    RowBox[{"Partition", "[", 
                    RowBox[{
                    RowBox[{"SortBy", "[", 
                    RowBox[{"crossQueryPoints", ",", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "&"}]}], "]"}], ",", "2", 
                    ",", "1"}], "]"}]}], ",", 
                   RowBox[{"{", "}"}]}], "]"}]}], "}"}]}], "]"}]}], "}"}], 
           ",", "optsRest", ",", 
           RowBox[{"BoxRatios", "->", 
            RowBox[{"{", 
             RowBox[{"1", ",", "1", ",", "2"}], "}"}]}], ",", 
           RowBox[{"Axes", "->", "True"}], ",", 
           RowBox[{"AxesLabel", "->", 
            RowBox[{"{", 
             RowBox[{"None", ",", "None", ",", "\"\<commit order\>\""}], 
             "}"}]}], ",", 
           RowBox[{"AxesEdge", "->", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"-", "1"}], ",", 
                RowBox[{"-", "1"}]}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"1", ",", 
                RowBox[{"-", "1"}]}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"-", "1"}], ",", 
                RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Ticks", "->", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Function", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"xmin", ",", "xmax"}], "}"}], ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"#", ",", 
                    RowBox[{"DateString", "[", "#", "]"}]}], "}"}], "&"}], "/@", 
                 RowBox[{"FindDivisions", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"xmin", ",", "xmax"}], "}"}], ",", "10"}], 
                  "]"}]}]}], "]"}], ",", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"i", ",", 
                  RowBox[{"projects", "[", 
                   RowBox[{"[", "i", "]"}], "]"}]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"i", ",", "1", ",", 
                  RowBox[{"Length", "[", "projects", "]"}]}], "}"}]}], "]"}], 
              ",", "Automatic"}], "}"}]}], ",", 
           RowBox[{"FaceGrids", "->", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"0", ",", "0", ",", 
                RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], ",", 
           RowBox[{"PlotRange", "->", 
            RowBox[{"{", 
             RowBox[{"dateRange", ",", 
              RowBox[{"{", 
               RowBox[{"0", ",", 
                RowBox[{
                 RowBox[{"Length", "[", "projects", "]"}], "+", "1"}]}], 
               "}"}], ",", "All"}], "}"}]}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", "grPrism"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.910509057930643*^9, 3.9105090765335984`*^9}, 
   3.910509138598975*^9, 
   3.910531061129292*^9},ExpressionUUID->"9427b6f4-5acd-4205-aa6c-\
3d0f4a1f55e5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"GitHubData", "[", 
   RowBox[{"{", 
    RowBox[{"$107", ",", "\<\"yujieteo\"\>", ",", "\<\"play\"\>"}], "}"}], 
   "]"}], "}"}]], "Output",
 CellChangeTimes->{3.910530973072925*^9},
 CellLabel->"Out[59]=",ExpressionUUID->"9f3294c9-c2ba-4dfa-ae98-1d5c83bdaef6"],

Cell[BoxData[
 RowBox[{"GitHubDataComposite", "[", 
  RowBox[{"$108", ",", 
   RowBox[{"{", 
    RowBox[{"GitHubData", "[", 
     RowBox[{"{", 
      RowBox[{"$107", ",", "\<\"yujieteo\"\>", ",", "\<\"play\"\>"}], "}"}], 
     "]"}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.9105309730819654`*^9},
 CellLabel->"Out[60]=",ExpressionUUID->"bf88969a-ab3b-4077-9e08-ac93ae893b5f"],

Cell[BoxData[
 Graphics3DBox[{
   {Opacity[0.07], 
    StyleBox[
     TagBox[
      ConicHullRegion3DBox[
       NCache[{{3.910453349*^9, 1, 1}, {3.910559748*^9, 1, 6}, {
         3.9105314915*^9, 1, Rational[7, 2]}}, {{3.910453349*^9, 1, 1}, {
         3.910559748*^9, 1, 6}, {3.9105314915*^9, 1, 3.5}}]],
      "InfinitePlane"],
     Lighting->"Neutral"]}, 
   {Opacity[0.9], 
    StyleBox[{
      {RGBColor[0.396811, 0.31014, 0.204105], 
       Line3DBox[{{3.910453349*^9, 1, 1}, {3.910539749*^9, 1, 2}, {
         3.910540181*^9, 1, 3}, {3.910545251*^9, 1, 4}, {
         3.910550671*^9, 1, 5}, {3.910559748*^9, 1, 6}}]}, 
      {PointSize[0.015], 
       {RGBColor[0.396811, 0.31014, 0.204105], 
        Point3DBox[{{3.910453349*^9, 1, 1}, {3.910539749*^9, 1, 2}, {
          3.910540181*^9, 1, 3}, {3.910545251*^9, 1, 4}, {
          3.910550671*^9, 1, 5}, {3.910559748*^9, 1, 6}}]}, {}}},
     Lighting->Automatic]}},
  Axes->True,
  AxesEdge->{{-1, -1}, {1, -1}, {-1, -1}},
  AxesLabel->{None, None, 
    FormBox["\"commit order\"", TraditionalForm]},
  BoxRatios->{1, 2, 2},
  FaceGrids->{{-1, 0, 0}, {0, 1, 0}, {0, 0, -1}},
  ImageSize->{Automatic, 1000},
  PlotRange->{{3.910453349*^9, 3.910559748*^9}, {0, 2}, All},
  Ticks->FrontEndValueCache[{
     Function[{$CellContext`xmin, $CellContext`xmax}, 
      Map[{#, 
        DateString[#]}& , 
       FindDivisions[{$CellContext`xmin, $CellContext`xmax}, 10]]], {{1, 
       FormBox["\"play\"", TraditionalForm]}}, Automatic}, {{{3910440000, 
       FormBox["\"Fri 1 Dec 2023 17:20:00\"", TraditionalForm]}, {3910460000, 
       FormBox["\"Fri 1 Dec 2023 22:53:20\"", TraditionalForm]}, {3910480000, 
       FormBox["\"Sat 2 Dec 2023 04:26:40\"", TraditionalForm]}, {3910500000, 
       FormBox["\"Sat 2 Dec 2023 10:00:00\"", TraditionalForm]}, {3910520000, 
       FormBox["\"Sat 2 Dec 2023 15:33:20\"", TraditionalForm]}, {3910540000, 
       FormBox["\"Sat 2 Dec 2023 21:06:40\"", TraditionalForm]}, {3910560000, 
       FormBox["\"Sun 3 Dec 2023 02:40:00\"", TraditionalForm]}}, {{1, 
       FormBox["\"play\"", TraditionalForm]}}, Automatic}]]], "Output",
 CellChangeTimes->{3.9105309784461546`*^9},
 CellLabel->"Out[61]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
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
O7CLcDJv3xxKefvpsHXsVUY+venDE0V/Gfh7NDsJiabsNQFDnpakmB0e7aFE
weMyoNNOqgSvWRhy6ms2ilW55pAxqFjPK6pSdr1XOrOcwPtY4NJSAtlR0xal
7V+RpgHSKMLioMavuiw129dKr3O2zpiI7fYPq7yfVe5Z22vUwYvSuaacTmGy
etdzHpjRu/fnPFELyCLqus3r5Y8fYL1Lanur9osye0h5yVHXTPXQS3nx6ufO
5cRnjgKnSx5i8W0h8dS39Sh6xSx6dTnRoosjKPoFlx/plrqEZYvgKy+bDf1h
lr24tOxmlr0qUfZXON4Kin2Oc9GrfnVbdZpot6L9IuM6q6xzZRmdCS45s+CX
Sp7OVc6++4ZoUPRxQI4BV79oy+TdQFqcQQszWFGOgYgvIwxElL09z0D9PABk
O4nBNnAj2moYtdKRT29lGgfXRsM59gQa21xGpf2jI5RjPNhs0H7iaPvpVB6d
QNpB5cn8sSyZrZzlYSD3SSgeAzeincdTUaAO0AMTUXxVp4nYFc04Ryj0fsA5
tzEyxCUT7OWdKBNC2+7Pr4MQ6hk/oAwh/1jzQi735rmon8fUzIUDCnQkw7w6
uKAhk/07jMvdmMt4IACddqg7aCrfkpfTJU+atMcff5wP+JgDHvtqIhc7nObP
iNivnEVZt7vvujWLky2KdmhsogkbJGbx9u3aFNApfmmMuGjRHBAKuxAZU2La
Kl5XD6qU0ejqvrWRIbebSuZWzjI6UgsF3hEUn2UUs8MoRK8XQoEGz/cph0IE
46ko9N5zObe7C5CCYtc8F45Z3Mlks+rggiZK0PbvTZtvuOGGWYDGq+xKEhhQ
2Lo5zyD0OksyeJoZzKyDAZo+tVcdDKiT4TqXHxmUIYN2kcj+ObHM4hkWi0pP
RizNiw2KpdA04TVnelTQ6h8Sew3nB0XNSeqeZXUzitXRX0bqerO6hBeY8W5B
dRvpj+dsGDUUk6Q+x1Kng0ekSu3DUpc1Tur6vNRQl0dO6jssK+PczbmkopWN
zqJMVd6XlS+NKn9Np4lwGa3kIuWXuvxIe0V9XSgS3M+j4KowAvEF8IgpdQDo
xwD2LAZAbir4wi/iXKDBlXSd9DE6sxodVJuqsz/rXFKvzvM5F2gYFUVn+4Z1
vgQeMakOnQNYZ1tKgRZdJsECrRd85rwW2iQ4TT7XuuhIdhTzGvlifiqSP5Dl
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
f1nwkbQ=\
\>", "ImageResolution" -> \
144.],ExpressionUUID->"68f8ec39-a4a3-4383-99ad-6635e83ee31c"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Visuals", "Section",
 CellChangeTimes->{{3.9105091947544837`*^9, 
  3.9105091962983527`*^9}},ExpressionUUID->"2c791fac-cdfc-4fe3-b2f0-\
75d5a8789c66"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"ghs", "=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"MakeGitHubDataObject", "[", 
      RowBox[{"\"\<yujieteo\>\"", ",", "#"}], "]"}], "&"}], ",", 
    RowBox[{"{", "\"\<play\>\"", "}"}]}], "]"}]}], "\n", 
 RowBox[{"ghComposite", "=", 
  RowBox[{"GitHubDataComposite", "[", 
   RowBox[{
    RowBox[{"Unique", "[", "]"}], ",", "ghs"}], "]"}]}], "\n", 
 RowBox[{"ghComposite", "[", 
  RowBox[{"\"\<Plot3D\>\"", "[", 
   RowBox[{
    RowBox[{"\"\<ProjectPlanes\>\"", "->", "True"}], ",", 
    RowBox[{"\"\<GlobalTimeOrder\>\"", "->", "False"}], ",", 
    RowBox[{"BoxRatios", "->", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "2"}], "}"}]}], ",", 
    RowBox[{"ImageSize", "->", 
     RowBox[{"{", 
      RowBox[{"Automatic", ",", "1000"}], "}"}]}]}], "]"}], "]"}]}], "Input",
 CellLabel->"In[65]:=",ExpressionUUID->"07070875-9456-414f-a5a9-8fdd78795705"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"GitHubData", "[", 
   RowBox[{"{", 
    RowBox[{"$109", ",", "\<\"yujieteo\"\>", ",", "\<\"play\"\>"}], "}"}], 
   "]"}], "}"}]], "Output",
 CellChangeTimes->{3.9105310721281524`*^9},
 CellLabel->"Out[65]=",ExpressionUUID->"0ca66c99-6d87-4fc4-82b2-29d394baf3f4"],

Cell[BoxData[
 RowBox[{"GitHubDataComposite", "[", 
  RowBox[{"$110", ",", 
   RowBox[{"{", 
    RowBox[{"GitHubData", "[", 
     RowBox[{"{", 
      RowBox[{"$109", ",", "\<\"yujieteo\"\>", ",", "\<\"play\"\>"}], "}"}], 
     "]"}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.9105310721281524`*^9},
 CellLabel->"Out[66]=",ExpressionUUID->"409ff99b-7b60-4a8f-a6e1-90b60c401fae"],

Cell[BoxData[
 Graphics3DBox[{
   {Opacity[0.07], 
    StyleBox[
     TagBox[
      ConicHullRegion3DBox[
       NCache[{{3.910453349*^9, 1, 1}, {3.910559748*^9, 1, 6}, {
         3.9105314915*^9, 1, Rational[7, 2]}}, {{3.910453349*^9, 1, 1}, {
         3.910559748*^9, 1, 6}, {3.9105314915*^9, 1, 3.5}}]],
      "InfinitePlane"],
     Lighting->"Neutral"]}, 
   {Opacity[0.9], 
    StyleBox[{
      {RGBColor[0.396811, 0.31014, 0.204105], 
       Line3DBox[{{3.910453349*^9, 1, 1}, {3.910539749*^9, 1, 2}, {
         3.910540181*^9, 1, 3}, {3.910545251*^9, 1, 4}, {
         3.910550671*^9, 1, 5}, {3.910559748*^9, 1, 6}}]}, 
      {PointSize[0.015], 
       {RGBColor[0.396811, 0.31014, 0.204105], 
        Point3DBox[{{3.910453349*^9, 1, 1}, {3.910539749*^9, 1, 2}, {
          3.910540181*^9, 1, 3}, {3.910545251*^9, 1, 4}, {
          3.910550671*^9, 1, 5}, {3.910559748*^9, 1, 6}}]}, {}}},
     Lighting->Automatic]}},
  Axes->True,
  AxesEdge->{{-1, -1}, {1, -1}, {-1, -1}},
  AxesLabel->{None, None, 
    FormBox["\"commit order\"", TraditionalForm]},
  BoxRatios->{1, 2, 2},
  FaceGrids->{{-1, 0, 0}, {0, 1, 0}, {0, 0, -1}},
  ImageSize->{Automatic, 1000},
  PlotRange->{{3.910453349*^9, 3.910559748*^9}, {0, 2}, All},
  Ticks->FrontEndValueCache[{
     Function[{$CellContext`xmin, $CellContext`xmax}, 
      Map[{#, 
        DateString[#]}& , 
       FindDivisions[{$CellContext`xmin, $CellContext`xmax}, 10]]], {{1, 
       FormBox["\"play\"", TraditionalForm]}}, Automatic}, {{{3910440000, 
       FormBox["\"Fri 1 Dec 2023 17:20:00\"", TraditionalForm]}, {3910460000, 
       FormBox["\"Fri 1 Dec 2023 22:53:20\"", TraditionalForm]}, {3910480000, 
       FormBox["\"Sat 2 Dec 2023 04:26:40\"", TraditionalForm]}, {3910500000, 
       FormBox["\"Sat 2 Dec 2023 10:00:00\"", TraditionalForm]}, {3910520000, 
       FormBox["\"Sat 2 Dec 2023 15:33:20\"", TraditionalForm]}, {3910540000, 
       FormBox["\"Sat 2 Dec 2023 21:06:40\"", TraditionalForm]}, {3910560000, 
       FormBox["\"Sun 3 Dec 2023 02:40:00\"", TraditionalForm]}}, {{1, 
       FormBox["\"play\"", TraditionalForm]}}, Automatic}]]], "Output",
 CellChangeTimes->{3.910531072632428*^9},
 CellLabel->"Out[67]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
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
O7CLcDJv3xxKefvpsHXsVUY+venDE0V/Gfh7NDsJiabsNQFDnpakmB0e7aFE
weMyoNNOqgSvWRhy6ms2ilW55pAxqFjPK6pSdr1XOrOcwPtY4NJSAtlR0xal
7V+RpgHSKMLioMavuiw129dKr3O2zpiI7fYPq7yfVe5Z22vUwYvSuaacTmGy
etdzHpjRu/fnPFELyCLqus3r5Y8fYL1Lanur9osye0h5yVHXTPXQS3nx6ufO
5cRnjgKnSx5i8W0h8dS39Sh6xSx6dTnRoosjKPoFlx/plrqEZYvgKy+bDf1h
lr24tOxmlr0qUfZXON4Kin2Oc9GrfnVbdZpot6L9IuM6q6xzZRmdCS45s+CX
Sp7OVc6++4ZoUPRxQI4BV79oy+TdQFqcQQszWFGOgYgvIwxElL09z0D9PABk
O4nBNnAj2moYtdKRT29lGgfXRsM59gQa21xGpf2jI5RjPNhs0H7iaPvpVB6d
QNpB5cn8sSyZrZzlYSD3SSgeAzeincdTUaAO0AMTUXxVp4nYFc04Ryj0fsA5
tzEyxCUT7OWdKBNC2+7Pr4MQ6hk/oAwh/1jzQi735rmon8fUzIUDCnQkw7w6
uKAhk/07jMvdmMt4IACddqg7aCrfkpfTJU+atMcff5wP+JgDHvtqIhc7nObP
iNivnEVZt7vvujWLky2KdmhsogkbJGbx9u3aFNApfmmMuGjRHBAKuxAZU2La
Kl5XD6qU0ejqvrWRIbebSuZWzjI6UgsF3hEUn2UUs8MoRK8XQoEGz/cph0IE
46ko9N5zObe7C5CCYtc8F45Z3Mlks+rggiZK0PbvTZtvuOGGWYDGq+xKEhhQ
2Lo5zyD0OksyeJoZzKyDAZo+tVcdDKiT4TqXHxmUIYN2kcj+ObHM4hkWi0pP
RizNiw2KpdA04TVnelTQ6h8Sew3nB0XNSeqeZXUzitXRX0bqerO6hBeY8W5B
dRvpj+dsGDUUk6Q+x1Kng0ekSu3DUpc1Tur6vNRQl0dO6jssK+PczbmkopWN
zqJMVd6XlS+NKn9Np4lwGa3kIuWXuvxIe0V9XSgS3M+j4KowAvEF8IgpdQDo
xwD2LAZAbir4wi/iXKDBlXSd9DE6sxodVJuqsz/rXFKvzvM5F2gYFUVn+4Z1
vgQeMakOnQNYZ1tKgRZdJsECrRd85rwW2iQ4TT7XuuhIdhTzGvlifiqSP5Dl
Ly4jnzxZUP4Zefmh2Tol5X8JPAI1i/Rx8Er5YyCTaDXSosbJ10Nz1ETgf2td
HqWLczvDmphMxF95FPzxyy6NHzauNAq09mz3KIodwLOjdapot64TOXtoTjUK
QCMAXnFpTHRsaQBozeFuxQDI4w2XxpMReyx9zzkBtNAiTTkbyZe5zAT1ZibA
ItNHi0x3TXn1Ii5FVoAaY0fnaaifPx2iQdGNqe/eZr0ZT+FAoD4j1ImBQKBF
xgtTQFy1btWCqDtAII50GZWeAC04wygyVeKrTGF0HRSQDS9IoVDoFBGFwzij
aL1skuzXWPaoOmSjDM9PkS26JFJl68naOZ9wcohBJv7bN0xjB9NA3cqpNFAM
Ny9K43WdJobTUFFCNFbkaaif0bYgaTQ4TnidaYyogwbqYJhbTMPVDQkMDsIM
0FYxKFbaJ8zgDWYwvF4GVMcllQNbN1B8nFoO9nfZky4RbRqTRoGr0q+ZguM3
gIeCx6IOKxQvuBkfCSUhU0Uk8GhjOZQ9tC9bSQBvgUcMrgPAaAYwJwWAqB0i
AMTWhXrmUs5Noh0XPRocOuVpMKyvg0fsVAeNMUxjdpTGGzpNRM0o7qCoec+8
fPUz2p4WnSVo5H9Tf0TzR7Zv304IvmEe4a9+RSPVds1KkXyzGEScaTszBYSo
L4IgaN4LGuZByzTRftkShagwvwkegSYxZFAEO3fHc0lIAEBVRLDVtDvnAm0K
74KjfcPq3gY39i9WF6wGJrC6XVJer7D64OvVY/k5M0dHRSSJfgfc2K8O0RNZ
9IwU0cLXB0XPzYsOnQsTE83VvD9uZ+tONCEpVTTacXXnFPkiIA7Kn+VyJut6
dBgSivryJs0rfGkmAEU89QBAmxRPiwL4Gpt0UPYMzg9agJOuk5z8t1lnnzp0
ov2pp9arU88/z5k0WkeSJprduVmqQ1Ng7WPQNMRU+XbHcn/qwpRi+ZXm59d5
3R+oE8XvBFxc8f6NdXBUnWZrNLQGAQV5e+fg8Mdud5cgkmAPGNrDfnIKCOHk
gyAyZ6aMyRcQ9TM65jnC4Bvycrrke8ygZ2kG6BiDSY1kINo7I132pA9EZ6On
UWArep8p9ChNAZ1vMTGFgnX9KrRNpjCMs/dIWLYIbCOyzQkXopnXrTQAdI7O
hCiAN9klpsrWrY2ch0TTPksy+CF4BJqGntr0R2ctjW8wjQF5Gupnap24URGK
gfbJKecY6EdAZSeQ9loZ5RT4Jbz9zKAgGlBAyvu67Ekn8CTIuIsE8xS4ePwY
3NhaB4WZTCHhrWdcYSqFXpy9Z2uV/RNwI1pxkyp7FsseV5vs4IiQdkg503++
VuUfgBurdSifzbkfG1X+VtTMUQ9f57xy9TOatIDCwrzT4+rwp+ARzXUwmMMM
xjSOQZv61uIyJQ0eTWmIUPgHeTmR+Bl4RBNIM65f5SfarzOXKYwuppAZEUSm
j8pEE2cPHa+Lwp69cgCYz88prUW0gtv/0SN3mOuLRM9j0aNSRCf6u6rNh/1C
C7RLqv0F8dMDoixT/bPPLpI6n6WOTJEqejaCI+aVqnqgSldfKk9v1C/1l57U
mrooF7DUESlSRS8GkrogL1X9TOPsXwvrFUFcXi+HMr/SaSKQTX2r6HToYVHR
X2cvhqSSF6Ak3cXLHzTXJ5Y//shc7lstar8jseic8KHFYjNdz2j+yyyW3SWq
k6rnvFPOqrM+iRSmqkMnwQ9JUScG4JC66fnyq766N0Bq1d5o5aJJeEjt7iBt
cILaVmWlf1i7fM6X1h48T/1s1dMH2pj5gWhFxlRszL0YRqYNkkfAfkwbbqtg
Z1D4dVwRikUgzbxGtVBCLZig32aGi4Dy1n9th/KndhCVTgpHpdr+fd7H61Ys
+HjdyoXtVJahNRmTQuauZ3ZrAW2+uPhJ8AZWZsiNgH0EbkRRm53kVkRtD5A2
KJGadvxV6/gVub+0f7USuGYLTX1Vmui7KlbL+M+gpWHjmSTNr3wzhCkT4O2V
A8YfI2Ao1LcTJIuALQZpAxOBvSlrSuLU9FeLrBUwQssKR2M/NLgDgaFWoZlQ
KybKImBtIG1AIjDdS9bqA1Nf/3Xi8jmMrRPAhtarjsAey4wligD7dSAXRV/L
ylFEXQrUhKFute0gz0tAWv9S7DrZYNt+/clY6p+0kdrv8144aeWuRNIUw8vX
HbIoynMo5jmyoTw5ukM8UUfVi8U8KaQtVQKrhKnVR2dwUtXQVRFD3mynUL0w
qqGQUNzEl3cGaV+IQtqTIaUWtcw4pvZruvr8s2Q2rzuwVrTQfgCjm1COlYig
86x4VAyxsn2+/iSPF6Ksluo0MY3D7OP/9XZqBz777LM+te1btmx5MzDiz6Y4
h6qEHhqUMssoqD7ODK9XZrh161b1NbkcNTH3o2QJ6+rSuC1ieuZEpxGqHJZx
WesbLmt5aibEUJz+W6FTqAgYqi97Ykc1rf5yRTPE0PTqX4HndOOLU+HsxXD6
1ACnHcxcBecP61YuqKSaXbeQx9q5DC0KYvfyGGWC2F+DG7szns8n4tmb8fQu
g6fFxPXtjvvP61bM+6/239T/3RLDiM5MaLZE0lYLEo4XEJIejOS5RCT7MJJe
ZZDo+q1F12crF/pYKl0To9Jq3srU17wGlJsopJ4M6dlESPsypJ7lIXGz5o/r
VsyvNClMXYJtm9x2puqPVpqAec0HmFAfIIrlfWeUEIX2ZmDPJALbD6R1L4Ou
yYWZFp9uERK/zoAf+aEqAGU6r8Sk19pBRcPLPgzqc+bTiteNiKKB/UMeNRUU
x1Bkh8pJGUaVZuXGuTldDRU5U7bEzprUYi1oGHLtlWcUrfvNdDHR6fpUIq0D
QFrXRFpu+sQyhtKsvwvv1RLy6vRn0b7Ue4RooVh8aTlaaB7pE4m0DgRpXRJp
mX4H28Tze2QELVSsWrBfR9vBdyQ6NMHY7lVUhO6gUDWegE73cbX46KT3bwbM
mvPMQqcn1MKMLk8NO9Ekdbv5VcWbmY3ALQdpnRLBfYPckepFMA5M/WgpaUIo
zkTN6CJGIjT3GSWEnYNAmt09reL1bCE8B4O01kQ8b+s01QXPgw5NDAWdC1Yn
hWgQhRZy2HlVRRRWgLSWchRom7yTVs5/7fKzjtHhEToHMLhEPDguTPHksnIo
0Aofu9NiEYqVIK1axl4qLdZnKBQKCQ3HoNMw48UhoJzPHEfKh3iEbDve7rOZ
pNw/DyPNsWY8wIEnr16sO44aqpgiPKSYlrORI03VuYp1pr7XN1in3l8zqi4z
5ff1kNhMYJu3dnYGSPYwlv2I/lT04SPZq1l2c6LsV/NVII8LO7dHpRsdeopm
vL3O2Z5dP4Ph/LCt9FOog28NK29KVP5lXPl3d66utPLUBk6EAYqpRjKDh6MM
DmUGut62CCqzgPwvhWr2HhIAzXiuBwAKkPT6v4obgE4IkEbxxQ9FKRzmUSgs
BC8yBVOTib7xjpSdEPOMZsUPRhXb0wnaJX//rLPOCr7y51nsIHZxHS8xWouP
YYkPmIdVvE09UCeHOXRDCb3kxhtvDL7ZZ7BjG8LKdRHn5/apH4SI7EqCMPuc
iAb6fQ5JtN/nCOfxHr/hhhuCSD6LPd5w4PGCcV2mH7V2GtEKH+14tKU8DWUJ
5OEQjSdCDnAEcIAJPOKlg8KepeUoTABp95SiUPUdoPp8FwDiMQYxDvjAjlIe
rfXRhl93l1Le4iu36u3yFyH/EewoJrGjiBAo7N6smcAkkHZXKQKy8kOnmE0D
NB7CPmJqyG2iFnCwI7NmGmifvzt0WluloFcJ0UAdilMBjftDPmIa8JnoXPg4
ikxYuCcsR1S96qljVdsutJtBoFnxaO9He+JbLayq4LopgNUWZjULONDGwmn1
4fhQqHD9AjxyqkvjRrNdqFwLFXSc5GRA5U7sXeYCTxtEhDY4QbHXklz54SED
4oLaFrRVKgVg9dBAvcyTAI3bsHdZ6HkXMaMVbZ7cACTBKGw607BHa9ZMg1og
qETcjBnsHvKwDWZA67JjUYfZIVksQ79Z0qA8RGiIKTWmI1pMvZkIuFDc2nQ9
+Vo1M+bA+++/369rha9F0XoRFDF3Jl8wolB24YJREoUoGJ25YCAA17EDXSoV
B73DHgWKRQieVxytcmey4pvqUNyFFU8Aiq/GznHvROcYl08uL1+lRkXPYtE3
1iG6K4seD0RvxPa/fxkfWJNy3kEKKZ/Nyu02JbUo78bKxwHl67mAZ6KpA8r4
vvKND4PidXkR+cjfgBvNHvqiKb65DijdGcpYAOVShmJGJdRKj6ifawQADgwQ
AHSODG1ZRD1QjyfK7sGyxwDZF2LTPwR4vgb0zIhIcgmkQR8jGui0oU2laaCj
MEYBLudh72CO47xKzcr5f4QLOqfqmtJckIWPBFzODvmOI0J+ExFPxYPO6mzL
4eGIAeFBJ5pdXRoPal6PAHjOYDzHhHxpKR7+6UD1UEAndlxVmgIq6cMBhVOZ
wvHAlwYH6zN9mpFlnwUoOLZAKNCxh1eax1a8Hp1ItfI3c4I6/YYiomEAyjrs
adcCT5tAqFJASIScEUIoBvHOPOE2+sY6CKGOu6GA0AnY554MfG7HE+Iihgjt
ob6RbdbDBY35DAFcjg353FNDPhctumwAnh3y8mDgspjxbKgDDxr1HwzwHM14
zg75XMQj3kyleG1JTna0Jm5j2VfUIXsguG4nIPsI7E/Okx6XOv3Kd13UIn8J
y19fh3x0ZMYgIP9Q7CwuBO70k5G/J8u32+dWvD6rSBWbl0/ROnrnq0Oe4CLg
I2vpsBKBaFsOQDTGWMoALq0DwE4MAL31FQzgipCto9X3HSl7mXmE30y1+0fX
AsDt7DQQADgQW/2VnyCNaHS1N0i7sA4aQ5jGAEBjP+wErtGX2j0ayAeisFuf
RGREV7x/O4AK1BZZXA4OOn3LbrxeC5yhDKc/gLN3yFlsAj4yiAeVkwgKd1ZG
5nMURu0L0s6XPCgjqTyGMY9+gMdS5nFjGQBoI3fUDPEBZGKk34JH7AfSzqtD
uzsiqC/Q3sbabw15im41ABBBYh4AOxIEAB3Rdm4dAEYwgD4AwO7Yb95RmkZm
ymlqBB2BgzzFgSDtnDrgoANGegFMC7FDvRs41GBMndrGoCCrrRwXdLDd2XVw
QQdl9wRc5oV86T3AlXQUmWgYstwjaBvt5lQTMV05lcxocF0PQGY2k3kw0auW
aogGUPBO7AjFwXSjokAAqIvriUTZY8B13YHsGdifPFLGn5RskfNiBPUv70+i
kccKRnJmaSRjwXXdAJJp2Hc82oFIRKRaEok7D/GM0kjGgeu6AiSTQ27jsUSH
WrJfFPFwh7YlRGSr+OLTS0MZD67rAqBMYCifTXSeqaUCxaV7eBQSwrLVDMAc
DiYmQqc6zwngus4AxRjsRcycaZ+L6t5DbbnGookGbIfoNDEh5RQHiXt6UiFN
BNd1ApBGOkh2xxY1J+X5kF8JLon8ZDCtcZg4/eR6MVFci0rQMOx0X6wBjphE
65aEmNEnEc2WRHIYSFsHkKA+wiMBkkmMBJWXwSGn+5J0ukQn2D+S2urJo+Aw
DaFAx9GurQPFZEbRClAMZBRfAa62vHaKxvx6JVPPIsVHgLQT61A8hRW3AMV9
sUd9DXvU8m3eIgIo0kAH8R6v09oqBd0+iMBUJlAFBHphj+CO1Ml4BLTKvvEM
jgJpx5m0WhhMYwbNgEH3kAt4s2Mo0PazqTHW0SDt2DpQ7MwomgCKLozibeD+
ggaAekVfD6HIBJ57eFASQi50MvMxdfCYzjz0+gKLw8yOzvmGd4FrrKUzrIBB
tIY8xrvOtt4tl1oYmOapvU79/7d2BIGNNr6DvSOKFYIQUOS0qByEY9W3Jv+w
7oq34UaqdHNsoLL9FqXZf9VUKN7XatXieatWKf+k1R7Haq1DqBR00yC1M3Wa
2sDob9deey399qOQk0P7s9UpMRrsHM8SrfuvQ6Itw06iWxdPWoMvMD3uF5Fd
Xmw0zjmBxdr6vsFihYP6O4s9kcUe2SFihS9SPwfr54ze+HK3vFeOqlzLKm0Q
22CVWR/UUJWZw07IkH8HbjQtMdFgpRZbsPcnVeWPPUdkDyOmD9BWmhmdbQ3X
eTJIW9M4nRlv1FGvMlqnnArSDmmkROGD6paYiZkWlRN7Gkhb3UCxOR8UrD4/
Gb2ng7RVjdTrL/QJeSPUkYb0ouhh95zeaPRwBkhbaR5bKehIS1X+kzIeqrHa
ozXPmSBtRUdopw20SzV+G6DuLJfGrZ2DO0JdqsOK6BRRUkmdNDJN8UPHqEv3
UCUFflleHqxSz2GByztGYNYlfdICz2WBByUK1NseqdOEmvSOAZvNVjD06S5A
6gchH4RWc8c7Z1yHPUUPi3JiuYJBYs/jRxxgPq14XQ+ogjmExVY6KbXqJ6tX
rRpRabQNEnrFH7D/Cb7VfwC5dMFRSXnnszw79ahI3kqT1q5IrYPRK/jVb6bn
WUgMvtqME/pkxF7AYu1EsyKxetfXKu3V0y5R6aKdHNQvXYDeGUG9ObcUDPeD
kjORUt5qOXJA4i9k8XaGYZH4/V1BriqF6nWr35TSHq4UsPjpYfFZl9UB4qOV
jpl7LJpzdlZuEYZ9HIZmHwMvcvIZ7AwY/JRt+pOWfSlIWyZlUx6Q7GUhOx8I
ZE+rTXZm3mBq3LhbjgJvn4Ao2KUH/oksSxMp6IOnqsufeeaZ69v/WRJNm9v/
DZEg6LepIRDSAey7bs3iYE1WYzRtqLwiLw/W4peDtD0TqSyKeIYRstzQb1PS
qKif/85U1oO0JYlUdg05irEAyeQwkqyzbAASEe7lkURrzStAWlsikvkhJzIR
IJkEkHzITiSBQlsHUtgA0habxxZRmC2jCOdE2n+ZCkBMrBdEvDhQ6LR7Tj5P
pUTyN3qYbOtUL/hUyp8EWdqFrcGL+XnV9HQge0JIdn4UDu1w1SgGwQiKFkRT
BBVXvnPID8wBoseniVY/p4qOr+DLi2azQKKvYtGLoqKnZETbVo85AVr9GJGa
dXl/F6lXs9Tdo1InRMx5d1Y7Dqj9GRtx3QIzgaHxZi+zhIy3Q3HRNXzxblG9
uvpqzTaCrD23seSxtUoWs+xqkZyp2f8RPGITqzX7PoheC+S23Tn0+SjHRMc2
iX4bHZKf919o30LiiBoCKKzZNSweFe3rWPzCRPHDQ/a8H1A+Kk25+rkDlEfr
7c2sfEGici+slzHLQUD5yLByf90xK6cpOEs6UO/1Ok20dOclKh8oHZvo7VgJ
xI8A4n9ebO+opy6y0Y3wY3ka0Sr7RpBmd44potEvYv5rAI3htdGIlIN6lN8E
0qwXrXg9Hsjh9w7Z/pFA9rCQ7ErV7rcQs/04A6rG844+Wo3fDNLMQQeirwcp
97q1pO1/Wn9gadBvQ8PKU7xe45XfAtJ2SVTeJWL7x+nrbU8nFYWIeN/xqb77
+sTTmeqpIc2tIG1GIoHWiL2vBQSGAAK/YHuPi86MSfhSE0KZ20DadKASebVq
xra5cXIqkDi4NonfAPlDEdyu5WTf7tK4DbqzlE2TIrXsTn6+1FfeqM+Ukqkn
c6eQ5Lw7Qxt11xPD53HwxwjHHVyQMhC8Gq36uHHdopFyLtA9KKw768zq0Y0i
nIXldN/JuqcB3Y9x+UbdDhcA5QPTlCtP1vHKuU5Hyu9i5XbHcF/5Z5xlt/iW
TWW/PceVS1zlxuIHAPG/ZAv/BPWi+uwe1mv3jff1PhyKUpBfuhho79/R2kV1
ldcercu3sHZ7voCv/X5ZWwvrRqMt6NX3C8mvVP3lEMoG0AENjWXBAziIxb06
TSyypFM4qMviXl172yEa7p5o/6d0oknBl0oc9FvfMI6sA2wADrHft8HxRX7l
ukBHI537HBNOn8BM7o7EMmgx8WUOCPdM9kkDospK3UAoCtrVw5AQDjwA0sYx
gTtC3qEPyOvlQH5vIP9X7B06SjHvfYwUPwjSxrLiWyI+Ae2quB6I7hUV7TZU
pPpkSYP0Bmv6h0DaGNZ7o9QrWixow7wrgN6eIb2V1qwPtLL3VD9EGu0ipPMt
O0HwwyBttE4TS+6vi5j3ECB9A5DeIyw96++E9NTgPi89GttsBWmjnHTuqbkm
ZNcjgO6NQHf3NN3qq1A3inEWlNP9CEgbCXRfKaW4RsxooPtKhoTUfuQZtJVI
H5BBo9651F0B8tq52kfaPwPSRgDt6yOWjnYduYrldyuQr/yZlF/7a45K3ebS
uO06HEi9NGLZaG+Iq/n6riGplZasKyPvnVKoOQIxal+SlxOQj8Ej6NhnimSQ
xosyJsxdEFOBQGfvXcICsw4rSaCISCMC0evczgKHmk8rXr/LBSFbnQ4Emo0H
RZ9qpzSp6qsRUqN10uMs1Z7t7Es9JxJ0zARqrwVqW4HaX7tIi0dMggIptlhY
TtYTLMse1u3LOpNLHepFmA2EXQeEtUSFZbxPW8MlPskS7dHsvsTTQla4AKjb
DNRVQ+oCDseEi2LGXzxczOuNVqVPsd5BQO/JocBhN6D3eqC3OawX+p9S4XEm
eMrbaFT5Z80j/MbgAMmAekZPjFjrHgDDDQBDUxoG9k2NxRCtZJ8Gaf0kBsrM
cVHrbguDEJ3jCMRvPOsunKn2FpdXe6pPHdqfAWl9gfZPRwKMZUC5bmW1+spt
zKhU/9YXfN36c0OC6V/qyil9qk3lRXl5MNp4FqT1AdI/FfIA+wLdN+ki7eu2
miu/1Wbke7nNpx+5FJX0DpL8HEjrDSQfFjH4A4Dqm9316ro3L730Un7Lstvn
tVPXLGqsYC79SPDnQVovnSamXx7iiiuaq7QcaL5F2rb/hn3B/37y6l1LChZh
V0nBz4O0nuob9X2siljxSqDxVp32uN//+xut0V9u/wlrfAGk9WCNB4fMdU1Q
YNWaqBVJGs0yMiXO9maUc08UjCzIaYtWyT4D2+DrztoODLUQDg9qa7HaRCe+
rnmrdpW91WjqMDGvrqw83k4WyaNqieouJ2pf6WxEM/1TQV2tfgXqa/tI2qCS
pjxuQlMAawlWna7fvRtr2StiYJ8OaqExZ7Wt0kFmVEG8q1/lBan/Gy/ITZno
qj8Vze8locD/+LDj8HVx4OOPnvxSOhOhrWSPkoiCjEf5gryc7KVq0sy0dSqq
vwKPdXNiuwAaezgx0hLXJtJolg/wafgk2CojzfSw8k5Cefs//1zp8AHKr7D0
zkD6rpHg4ORE9VWg/hcl1aOj3Ob56lv9kRH1Rftft/+OBsa+zJo7Ac3zI3Z9
WqLmFqDZm/dlNStnRZq/GX7jYc3FtadZcC8afS1A8pyQvZ+VqLcV6P1ZXq/6
6ki9r4I0z7VwQ39WyKLPTdTbCej11imU0Suio7xejiCQXr1ndyexbLGiFyKx
Vt2hiJcnXpAot3NYri9VverFBXLFqHZeLtNAcnfQ91Y/zZc6lUsxarNflKi1
Cz8lpjDTSRUPnPI1VFTm6/S9xaaJtzkpZKmXJ8rryg8wSwlVs9QfqC8f9hp5
FKqjWZgo/tCTuatUwj1940MB/YZEed34AR/k5amv+uQltLvNerIdCxYs4Lc2
OlKNXpWozAzTiY62H5uw/7r15/oalQuCu+50hFDuPXz44YfNCGuwbb0pUWsP
oFVv/daiuvr/eNLK+b5FltOaCaLm5VRHqxituuqrVl9DIkHD5kTVPYOqcz7o
Excs+4yalOSBIVu9KVFvL6D3h0bvtZed5ZfoVL0oTpxb1wu2Ckiyt52DjBtu
TZTcG0j+wSchORpGwFfMontI5yXa7Lfrq9pt8nagtg9Q+31txq/dunljzmUt
CkmmWmVuktBozUpCqfHuVlq5+j5vuXeB13obEGrKhVj68b7xze3X+ULJXyGh
qYt8apbcwpJbQpZ7bzm9Yqyjg/U+z+UgIbpwoltZtH7luer3gUTJ/YDk77nr
bI9NpYltNzXm9wVmqt3fF7/QgGE+nCirP5D13dpkUQwxr1YxTa5MtmbNkF5c
e262JooaIEVRz9p33HV2JXkFHQG9Wy0auUIJamwX1f7to1WrVtlXZQWivRoe
TBQ6EAh9T97rCxWbWjdeqI7pW/x+pzePOeYYeqdoinWq6Q0CKr/dEJWZyChv
idFIQbe+q+oaXzOhy3SwoH3x70+Ub5cb+f3E78p7ycnSEOui+vRGw4SvcMEw
7Wvbx0afmn4WIRudlHJfouzBQPa36pHNgUNedrQGfZll69qSe5JR5yGaOZ9a
qw4Bit+R91KY1AzK+a4hACg8nFMOwEsZAFxITGd5W8XroPCmh9sTRCpbEgEM
BQDeBvc2CgCNGKfGFJoWtvbu5nofRG+OPFLlD3PyuZftm2H5Ys/LmuUnVNJ6
8kSrVZ7tYe8FxPdh8fckih8OxH9DBzj+vbS4UOnXB9MWtBXESy2p+nP0MCrn
Vd/s1fMys2ZIcl+WfHeiZLQN2j+kS25T31Kj6Lz4aFX+pBMvTX4gUN6Plae2
l0YC5V/PK1feDtn6QvDu4wvF55aT/xh9x7aO5oL2ZwJ3JhIYBQi8lSegvv4u
BD4jCXDbQv0yTBKgaYMDmMAdiQRGAwJvRgkIh9cIAlyqEYGH+ca8/Y+UBCgr
A5nA7YkE6BRLavJo3S1Z3Wo1ufb2u5VRm4ny8qbPngHpfsDplqY/Foi2obk5
GIl+Q31hSP5Ylv81LN+Fd5+gfLOQND94PgHIHwyk3pwofxzLf6NIfsb4F9RP
Q08OrNrLLREU/d2tL4WeAK07RovLUI8wYuKGf14HdzSFvGEqEBQLzfaBFEcF
ekcF7BXMXgNisuFQoOPGRBpms0PRffoae5nmkGf8BGnc6mjIphFtKUP9OsOB
2BsSAUwMAcgbC50ETTT0lBU5r612+dFK0mygtPH222+XvmI2y7cx3tatW1nq
9YnyzWanb55//vks/9UkV2na4ksq3j+0z6VhIMbkSzLYTN9xqDSPMYwEktGw
GMIwGZSCr9biMiPNIxEr5wnwvqeIgN41MNQtsoAZeDvgccv4ukQGUwCDr5R2
kW+D3Lv4SFQNxfHRVXxjxvbdJqCj2Vml6pwKdH45pLPK5l5WWDQC2JARxhTa
9MVimbWTeG2iRLMPuhgreiUkUa4g6Bi9eu9zbMFLnWTu4hrDktFwfkSyGGQI
S86tEaJOr4XJunV3RS62QdIv5nuR6e4FxI9l8dckit8ZiH85XTy5tLj4TIg3
28cg6/B/Ao+4wBX3XESzHyAwjglcnUhgOiDwJXCvH9EI5zW/A+Wf6+RLa0cH
14xn7WjWDtI+Q2qnLs0vhrSTQwu+axSwzMqJZRZIrD4eC5u6OWpJ9GuYAEw0
7zYmKt8FKH8ppDzv50z7XsyySw3jIlSQF9AHxAX7N1cBMJOBkCsSwcwEYF4M
gsHesJ4YP08nWs+for4F/MMagGYKkLI+EY03L5fRfCEdDfnKkmhE5FcSzTqH
RvqOzLGnxAXtXIAmbSIuswGXF8C91ZAHnddQKNFw4gSTlutAyZxlTFCmARGX
JUKZA6A8H4JCrrVU0XANuXTtx9B33FdyDJC/M8jupYny50r59NvnQ/Lz/jXI
wo2f+AT02uGkoOoovjfvMI6XECgPaMeLS8IQVGX0/iWXXEIQ5jkI3In8XBAC
9qXzAYn4WivBpDjEOMIBkS2ldYDGDJD7i0Ga6WT+SE2Rsa8f0Xg2nQa5zw6n
cahJy/mHUwAN73A4bjOjifyIxnxA4xlwb0vIac4tgyIThc7KQYkGZjrGwIGZ
Pb/W50IxBAWiqTQWABpPh2iQtyxVEuqTfzAXprzLsIee+vJnsfwLE+UvBPI/
F5Kvdyf5UzuDv6xdPuev7V/Uvdiku5fEdLGZiZBQIDYzB4kDCATpQAdJuhF9
/qSCM4e5oJU9iMuugMtngy6j2XJRTCpN9L35T54L8ecmtHNa5lxaaoumJBR7
SmPOm1zIUOYylPMToeg+VMUEoWh2KJTYP5FggKLJAlkx/+N1Kxe+cNLKXbU/
qx0FBx8Ihe6uwD7kEqYxj2mcl0jDnVfzFLgj0E2lgbT8xTva/WO1N/a6FQva
kbTjIDtaxo/ZuQCMiEgjYFBAspQNB/XyXMZo5jMatAwQoXGH3Ond4vGwBHnT
qi4hDkQ7ghb1vcg6kHK9i03Vr2tD0Vgbi894jY2se4ELrLiVf3YiAbNKQXTY
Ps4cta3wJGICoQvFX70vSu0ECsW0mtEUhyGLMlzYy1zNXHYFDM5M5LI4xMXd
q2Ho79an2q8/r2svNwbJ5esOWZSIhPTMyoHg2Y8IhN5BC7uNa/X1YEm4JHA6
v/E7AYs2wGK7ewpPx46x6KxYTK9VfDDw0DOcg10/1wP9aC8wtCz8DkBiCSDx
mLvXOtFKq/puqtf/UmHIuhVzqTAgK6GOhXeAOBeil6TibsyHYzcBJLsD+acm
ItkTIHnU3cu1aav2IIqJIvLf7V/q/87ARuJAMpFq3m1E441dHBrpNm4DXBYB
BqckclkKuGwDXFqYzjxVSv7bY/OHdSsXmAKjgo9PhI89ZyIXj91hnl3xuj8W
AxZoVwnEx2xEJobRPgNMqWqiMHXgTDsKciZkU5Vm9bNKc3UxsqzMhMvUFlCe
WzR40zNpcM/R3eZ6Hx3age6kcujEeIyHjqvrZgPQoFNfqkgZetYnOXrTJa5K
CBeKdfUZRGbSLZiRjUIbvZc9dlN2GpfPbInTyJ0J6xKZ7QWYPQLq8yZZ3AhO
k/peVdRaQzV6A6hlYp5/Bo/QG8Gr6SoZ52V3jfdp7emiwuUPPqhXJKENbxCt
vQEtvXiLI2TufFItAm18Lcog/8s4L/VFxuqC5E8G0iiTlvNgWwGkpRz4pKLZ
R6KhXmu9WE9Me31h7cqFurS0KJvzqSjDU1aJ21DpkIR95SGxN0OQ9BRg7K7s
PtY+p2XM6cRETvsCTg/JIsSsVMu6lY0MNS9LuqZUNMiT0xbIAa+0XaKhmdN7
MZoTwmjevPXWWzfbHUT3A2jQikGzCZfCw75Iw+mUtTRVxtQnClq5Pi1SOrMc
okEOkWyTPiX5OF9CfNDmY4jP/uY6f2AIrTVsBnzIV1daszaneCk2sxqAJho/
9TdpOe9jAwkfzT6M5rhENAcANGgdollarCoqH0+TCZzWusMPKh2ORG9aihuo
do6TT8V6Dr8745hEPgcCPmjBotkQSfF5de3Bc13VPztEIzOslmcQDQ978I2o
C8su5PMp7A9yfXQihYMABbSIUW+3j8eRdLGo+tNw2wIlA4XPxul+ltElxINd
GVLGrZgTGMTEbLS17VGJfJY7Ptxpjhb50aJnNEWbPGxqC8xHkRC/dMpQYNvS
O/1RvQPyinbfRNoPBtrRGj+94DvXLzw7pBxFbjPKKW+m79hRfJXFo/19j0wU
vwKIR6v9uhYZRu0EMmFZi/8Iq7yCnMRrTOBgkOMjEgmsBATQqr9uXtEXg6q7
NFR+647169fbCNSPtL7GaleA3KEtdJHaVUAtWuFHaqmnoejtCicWkUcrcXxf
ZnSaORpK2EqXEW7OHpYobDUQhhbudcMFmeZNBJ1YmlT2S7+htNA2CuozfrqZ
rCNmYBMGCoJSxdMG4DRqE5Fse6WF7cYlU47z3jqz8yxuNJFOqui+4TRyR+Iq
1nhoosY1rPF2cEf3UMU0o1aB9KJ/7gptrunTCh7qvU6Wupqloj28kdRDWept
Ialym3b1lf4m3ZEhmSL9QcZEuUB3TZR6CEs9JFHqYVGpsZJrJtKI6bTxKN2X
n6l8f2LSco2UHonK17Dy1YnKjccW3eG3lCnZJXsARAQ2I4ziB5SGbbo3eLzd
wa3idY4cxjRWJdI4AtBA604DhX8XwAItjkLRaJ4Ff/w9Ljt58+8HHo9YHM4s
ViayOBKwQOtNu0eqMtS9iICgGGV6GMh7DohskAwCz0Y0zHsWTVkUvSEunwJc
0MrTHp7FiEgNdSc2AMq3TFrOeQwBz0ZQUEsFtWgQlKMAFLQa1ex5mG29NLac
cIWh/RCOgIYnUkFt1wMTqRwNqKBFqj2wOylJRVSieSr8sT77KNTnMRL8AcQF
9Xmgtj/iYk5xEGOMaNVqz5AJobGdBpB5g8lk/Mq4YijU54yOp0AdRhEoYmwn
CEWakPoZ1cMFSDbY0WODRF+Um4v+WoYKm9fEYiqUKdRJuF8ilWMAFbTotSc2
oVJUSOMMn4WMSfSu/9idTElkcSzIOzoDC7E4FrBAq2N7hcxmaiNpuO3bkBuZ
Sp967S5BwetW5yb2PokUjpMUqBMVLZgNUiDnEW+i5GVzNett2pYLxmaAh9p1
ML58GnChYCxV9PFANFoo2ytiBpEuBRGJCm8gxb/gxEtXMDuknHpUTmS9eyfq
PQHoRctitd5c04yCz50bJNqsew7vxBDUvZZ175Wo247i+iMEaEls76iJv8PG
Z/InAqadc1L5Nephk+C0vYVRtetYLTrMEKldC9ReGVIrS7Wq8ugFfwvkCYWJ
edVc7T/pSnXOpHePSj6JJS9NlLwOSEYrf43kbMFulOTtTjLciyGg92TWu2ei
3pOkXvoNnTnRJ1SgpxQoFrGdUayPfMsFMnYCRa6FtDQq+hQWvSRR9MlONPcC
o1XMfXC5nlazZFlD64k1uA9l75DkTI+SmVYpWspoeiHCcArAgFYsAwzqq1EY
HnRlPbQRQyEGNBEZzUJFGE4FGNAC5b6eCYi1UJOjIEjZ9Jx8rr7uc/Jlo+ag
RO2ng7yimclI+2lAO1qHrDe+r2YPry4fsEZA3GPScua/IhHEGSDjaNY6AnE6
AIFWJPfFttBQELrRhwOa1eChph3TVvGa/+gAM7SCAbE4A7BAC5P7sUGUkp+J
7PKegSs7b5s1vAUDasCQfLSMZ2GifHfAfVB03hKmNJQAu86bHAHpHI4Az840
ZQjEOUACOsUegTiLQaCF2P1w5dhBIMyKlLxzOAo8G4HwlrZxk9atCbwLyD+7
WD4V/lTF6BwXvXViRZ9ilwuINulk6AiOAX8B6T6PNc4DKu4Euk2REb2iaLmx
I5AJCScCIKlrPwUQGSfoBWqhDo3jEnmczzzmJvI4F/BAy4yBQaifJ3cMjY1M
I7C5QhGICxjEnEQQ5wEQaGmxAZFtG2kQVR9EWyW9XzjPgn3H+gwLrkBOAc9G
HT4XMovZiSzOByzQwuL+npGIoHFCuWKRioIWPBdsqFBE4yKmMSuRxgWABlpL
3B+biNnwU2xdGl/uuHOYgK5Kgn0kZ4HnIggXM4SZiRAuBBBQ9ds/bx6q4kxo
ReRVc0k/z5lALlQ6N1GyCXdEWxJty4LEm+04xJARCsIGsD3UpJfN4GynV5r8
hWGxYh4sauWgbYkiYkVHf1BsoLgnKdfdQGAOjjXlXDh0SUg+dZWg1j3aigqJ
vhiIRq0MIFoV77joTCA4zZOfD4u0V8f9JpdH9aNOHrQ/GdJ/CdCPVsUP5BJe
u2RZ1Z/kynrOtq/gEvJNVon679DudEjlpUAlalfrE7hEM0g5tIkhySj4nRqW
fKKTLM37KvDsb7By1FOLtixEyi+TyqnnF3WtDMRGXadyLgtdXdngyw8x1+Ws
fVOUBuqqn5RI43JAA3WyDeLSTgC8Q8f5n9tdDY12RFBkZ/Szrayk79gBbI4i
QWM1ExORWOfpDw2g1f7mbAjfNPTfeBdkDYV3eST2zVeqAAn9ttJ9kPMRN4aQ
ZPrPPDjcRJ6QCOcKAAct+R+Ercf8GTFNMzUaFriqIiqqYCeyMvMBU7w1kRQN
dVJwmMpnA+CDlvzToXdNYB7nOH1xWnuBtOUrUaVTtAhWmgfkHMsdiSCuYRDj
E0FsBCDQAv6d2LGUain5yu1pRu2ex6p33cm4iXQ3eC7SvYl1j0vUfaXTzZ2q
aBH+TthAxtcJgRxrO4jvnH322Ur5QXwd6kzZAp6M+hCuYwxjEzFcBTCgJeQG
g99IahQG9QO5g/af9+frMp7gQfBQRGAzExiTSOBqQAAtDh/MBlBKdCasnOrL
bxExVsUsMNk7w4Dd5FbwNxCD65nB6EQG1wAGaBX44LwxqBJRyhdiINfpTypm
3Xom8mjy0lTjS/1brEsQdBvb3PVRUmbKrWhhoyNCELNNgBlaGT4YW04qMxSu
6slzFRNtthlFf6NyQ9+pad1mL/dmeTNRt85Hz9gI9s9kWgNBlGiqOzpzB6G8
FqA8Dtw7hE2wAfSuMeXHo7eBmFiKO7nnsQlWDXJThdFv8wklDvWeYMy2W9Vn
hpZKDEtkdh1ghiZLmmOwfJNNjl0K6XEXThv9JiVS5OiVPYaIlmDNchCl0/sc
uDgzwkhTidEiHHToFWKpKw2FMkwwFwGYGrawkxQdASohKg077OW6RfE3iY5v
7uTS2BHqvinsCDOnTyB6JAOdlYcOUEP0ri+mhwJoqp9Tm2AG2NX6ozaTdYLW
Yi43afRvAEEE/XSd+IMpkppos2ZOjQ9SQ4vf0FF8iNoNTA1N9zbsRZt1XEcD
y/fs2YOVfXc3nhBid/diIrjbgxFmMTizdkh066PFFcBsVR08NkqRdE312VVt
xq2bawZIB8rnkcPsLtPo3yjHTnq5lxPBoYXCgxLB3QTAodU6Qz2LFePIo0ui
62SzvsP7X3GjmsFEKm0V75/ddcbn6K3lZJdnT37NtZO/EuJIf83bIIA7VAYm
0rsZ0EMrwIYCyy1d5mzh2mC+qoDVAI+Ljep60vMUpp3Mg5B7ey0KifaRoNZD
KppbABq0k8VQbJFFFYFoLmC/pguUFt/+zR6N7KMxp4MLV9aP8edd2RtRSPcw
pAGJkG4FkNBmF8NC1jeqBkzhAENh8rwWO6I+4A/0dJhko/zr4GLHaAsz6p/I
6DbACG2R4TMSMUWQEYpkJwtGImot8PFMq69LY99kV93nfBOaWOFo3cu0+iXS
MpWoGOJFW0+YFoVoAQRtLgJqE+eVSk++ZvQIcSyiTUzB0VE/DlPROI1Dcx+j
6VsOjRg1C6PJtc2DFV0RHV1kOLJq1t9dF3rFVnG5SMskC/dUifQIfjtELLMr
iWPXJ5HdHYAd2u1jeMhRmQ6UmlqXBqbrDdpJ4lIXKwa68muhgrR+/XrhlfTy
f0XybQeEe4rNLnOiy6dXGM32LVu2vGnR3AnQoN1BhgOLG12OigjmDZVMrxaB
86qwFj+iZJf0Pvgb3wRc0MaNPRK53CW50BgC2kpkeN7c1M+jQmj8QcoCIOoj
AqLreexmqvzQ7yVSeQio6J5I5W5ABW0zMiJkSCMAl/g6zCmQC0UF3fki5E5M
v4JwP98Bf8q4mLaK14u1FWjqlsjoHsAIbT4yAlgUKjYIzyxTIoy2rVdccUUB
qy7MKh8Xoq1lIs5Y9Pc9ApR1TSRl9/Xzx+lWNpiUXgPRaknZLxvaBIqY7NdD
rVsUJqHqFTH7DNDYJZHZvYAZ2oZtZMgChyeCm+qSmlkhpenvIjbPOy8G1WSK
KnJeFF2R80pFtw1I7ZyI7j6ADu34Yip729ylc2Z0Wm5iMartJhrBmRJn+52C
2Hj43KJDTs00A4VTQ28PsfOOfuCugk6J7O6X7Og3tNvjSGCqKHhCeaYt1Cst
0FS7h+l9hr632kfZrgGLbaT7S1yMg82WDDE6P4QizVRODzhOPISBNtAZ5Zmn
mLM9LBHWKJckzdN0CogQdJL+j0ZomxS/0fSTP4ZThGI7o2hNRPEgQIF2zRkl
zY22VKMig3yC3Rw9U0YGhEXbwT7je8iSRpnS5FsROqwUdVe6E5haEkE8BECg
bXJGhWwHgdCNCGwsO4Vp2HnOnpFURoPHv5VI4wmmUU2k8TCggfbH0TRygfWI
EJABLkkahBl8F8G2oWFWgdEONxdddJGg8fjjjy+xz38zkcaTJvTzz3VoSuSy
FXBBO+SMDlXsw0JkdP8X2czGp556SilTX6P0pa+3c1n83nvv+Vz0vozSUXyN
f7KVnq/8KS4Heut39RP9djeQ+giQijbAGS0Ngiri4PvXQSw2CH04h3q9ps6w
O2waMwg6hdfBHzIeU8z0/6wnX0i4C8inT2mYLCLaL/daNIrIu7gkWejdiJZR
bMacbZsyaPioI91N+37aFfC3tm3TwRh6w9uKJaIiPDSkU4/v5dz+1KzKp51K
7jvxVDKiV6Mqn9G5b88y0vYoa0M792TKLNVmulvJZK3i/dNFSewzrf7pQV7w
Vqdl9dqx8FzlRoaaoNLlXv0Pi6s5RE30YKO9bFDBHc4vtArk7CLfFv1mPJA9
fKDIQNHgWFaiOPxF/Yzc73agEu1hMyYUuNHYrI7URDnd0f41Lyz08+6jqF2+
kiA0d3oLvdM7gNrHgVq0fc0YEJuZCFXMo9YVJHa+TSDnqJ9Ut5vsgQuFJoyG
l4OFO1gT3wrgPAHgoL1uxkhTpzKBwvfXXUZl+a+WI/MFczk29iCPTPcfOpi6
GaTdAsg8CcgsAfeOZSNBPL6qxWcLC9raOULDzsso8hBfrIOLF9Nyi/lmwOUp
wAWdIjcWmNNQQOiVUInpFmYk4lvD6CXDI2BL/Ag0xyWVUQuHPoiMOeRZDOih
vYPGSluiUA+RIUVUl6BR3QiKL6lvLqTNOJMvgIelAmhlADeFAYjxFQRgHJsM
kq2dYqjZm2dAMYKpYaxjwG4DKUftf+RQO7HyG4HyzwHle4SUO6OgffuGAAbP
uoxKoxgIJOQo2PrTb/iO0mnCXXyeyWSaOUEKnZnCDYDC04AC2jVqnDQAcg2I
ArVcyACGcU7nZcV+2Qgrsns0lRJN6kWyu7Ds64HsZ4BstGGUkS2CRiTb7F6S
NQAkyg0dGRr6fJqQ6T8DHpHKoCsz2AwYPCsZUH8z2itqPJt+JqQcBEA86nIr
rWBMCEUm7jT+0LYNctUnlah6oHRjKNcBKM8BKGjTqPHAHsw8VDE9eSuVC5XR
SeUAvOY+ijoENFk7FYUZVhUD85sAlM+be/2RCbSV1HhpLVRLkrU8RBnKmcc0
kHcUUk3Q/+2QtIJu4ymQloqkJ0i7GiB5HiBBm0pNYOMhEPe7nEnz2BnkOYLC
TpUDvcbCezxZjML3hyLraIrGVQDFCwDF/BAKZDK06x3ZCNqjN0Lha44CcBL1
aO8N0q4E2r8AtKNNpiZIy3Da7UZ3GcuYHwYhokcDwnQAFzqLx8FjU5GgyUwb
AZIXHRLuPUX7TE1kyyAQt7qcSctYUA4FTZDM1qZ842N1AEAz4TYAAC8BAGh/
KbPoXgSWNCOfFquTPexRTrsdIyryCo+GKFDfxLMgr2iC5BVA+xeBdrSf1ETg
C0g7TUPL28OeIRAUSJkq07YLsDsoL9qbQ8vN6/VA9JeAaLRt1CQu8ST1Gpcf
WeLRXr85sabUisrQvGth8p8pLZumV1OAhMS+DMTODIl1pZt+o4BxI71glR+0
s21Op94oPGTPD/PrfSeqaSBruhxoegVo2iWsSZRa0nQ5LrXLQY5RyGfMN3M8
TtB8HwKPfTsqfxDLvwzI/zKQjza9MtvI2NDOgc20AS502ZMF++ByPN51H8la
jV54eQo7MYVLAYWv0KcKQuTVi+KMtNNGY1S615QT+235UdCeHwjJzsxCRjXY
YAZwCQDwVQaAXn6m7FNthQCcSd9zpoA2a0WR3Xj9H02EDLaJ74sz4O4wxGAI
M7gYMHiVGUwPMxBRHGJwmsueNIAjy1H4rrkcV2j1UDCdeKLldyHg8ZpOEz3H
aLe0yVy1IR60excZxbHlAJg5w6G4Vk0XoN/QZh2pKOyK+a1bt3La+QDFDp32
5vnnn88o0MZpk6Wh7LtuzWKzIZyEcgJ952kPdurDiUZK+49ZQmIqhCH0viMU
bROjXV1sCFHx2sTIb44AaecBQq+DwoI2XZsMzAgROtZlWZrR2nApEmGxYfQD
c3lRvXpXmJHoN0CM0BYW5wJGbwBGaHu2KaCu7Q8YHeVKke9uTwsRotDKVDk/
dFyAe6mHxiiQdg6g8TVAA23PNkXaVJDG4fQdj/OemYLkR/qiwoY02hwqFc5o
kHY2gPMmgIM2apsCzAnBWeOyLM3p7BQydPBrMA6/rQ4eaNegswCPt3SaGKtD
e49NdaZjZ+9oHvrggJytoO1SjTexLoN+M97kA/lR0JugjdRSkaCtpM4MIxHD
GBEkInolJDoixwZD+6j664FE2Gpo/NTRADH6LfzTO4nKvb3EuM19BlD+daAc
7b82VXoOCltJ+YHu7UhrQNunorjdAPhQfhT0GDeBx2aG8GhTFQRFj8AoHgjF
PwAUaEu2acAuqF9nX8pGzi7QPqMoVtMnT5oTwEMO4oZi+ZQhJH8Cyz8dyP+G
lE9dsMh+pgEbIPnLKBvYBtDuohEGvzCXF/mG611aaRoTmcZpgMY3AQ3kYKeB
GpVooHmAu7vcSlu5rhyeX5pn4wZ9PVAmMZRTAZS3ARRUC+8MLIR6fRdRNnIW
cnNYvohDjfxfOflRV4Goup6N50DGJ7P8U4D8d8wd/iAFitBIfpMyECoJ+ig9
bBeovo8o/zXlPuQbkJHF9U5hvScDvd8CelF8vjOwAXrd81x+ZHlHYZ+LlEyN
8BtzEZj5JZzANeBhcdmmMhOt9nUAwLsAAGrEGQAiciQAmfWb9uveFPm/1RcF
jLy8aLQj/YlA9LelaPoN7YY3HRi5GdsSc0b19jC4+KNOuByI3zkQUXNH9Wwc
CeqbOgEgec8h4Y5dtNnddGAIBoloQUxyGZV2gfpiczw+NhcFKke+cWNpHqi/
8njA4zuAB9qwbrq0CwoaEQ/t3XJmgkaa5srC4N1e+b3jEvUXG6JcnmWXiIae
jgM0vgtooA3oZgCD6Q1o6Dxjg0EDzxEk/+Q+Aj4kCCKhtw/BORbA+R6Ag/aZ
m+FMh/tpEJzhLsvSdJ5kWWbMXwROes1p5V/oIkXJFAzhQC7nR3wrkQIakj0G
UHgfUECbxs2QBhOkoJcH5wzGrqYoCiMNjT+Yy4scyaUg7Z1EQmjA/tOA0PcB
ITfaNhOYTi/AxeytAk3nhXJw/ujgZHuwhDdBp6SkwvGmc3Aj/WgA5wcEQrEJ
FhoKN1FR6euyJw0GTQZHoafh8a/6o3wtTAaDKKCJtajN4Y7OQ9p/yNrRZoGe
22CDQQWD9gHLG8yXyzH4N9Ibch8X1cFgPjM4CjD4ETNA+9rt4ozDTiu10+8E
A73wAhsHWkLmAg9Tm/zJXBSoYPnGC+oAsYBBfAqA+LFOE125aIc2g0TZBPsL
g0TMKu3kMiqNY0cKjz+bQgA6uYWLOL8OHguZx5GAx08ADzTFaJeQmQQWXKLd
8XLy/93JBx6hHtG7sugjgOgPgGg0p8yrNDiNCkFT6K2jvQFysv/DXOTXmmbz
CeEO0FFpqQB2YwCHAwA/BQDQrMKZwAq6a1fSflmTyllkpzgRTxoH+J9Oe9QD
oJGQVO1m+YBonB8KKHwIKKDppjNd2efIUm8lU7V/w37RjI/3yiH5i/so6gTQ
YYGpvXJoOY23SdnfLJKfASRo9rFBIsJMWt9Fl2n2fHFzCAo6gkmvTqj8L/XN
VZTkEOoBgFZSrQYAfq7TxNAWmok+y7kGtgxaPtylBrH/21xe5BDOqAMAWmW4
KgxAjGEgADOdAbx2+VnHqC/1Oe2ahzZPQ4Gykf9/nPyoTziVS4JpXYmdFZDo
JSBtJRD9CyAa7f83PVPEbfnXhCKyRSxoZP/VvGHQKyXsHp0b6+ZYol4YtAZ5
BZD9SyAbbfBHnbxUultcsedIsXsN2v+b8h+Kg08urRgtST8YKP4VUIy265uA
3bteyqYMvqicI9F/c+U82lpGhybH5Xv7D3AzcDmQ/5GUT93RaA++sSFX3tX5
fa4KTYkRLYVgVEBx0FiPx/9n3n9R7YdmGsWh0NYTFAIhFL8GKNDWeiO57Pdx
ZZ8/7VaXdjvCh+Pf8or3ZsUHAcW/MWn+WATaEW8oLvtmXpiIBeuTr3ckDTmB
E0rL34flHwjk/xbIR5u17RQq+6blLMLAUgAy4Z/vFcyxFIVVIDpYPg5lX4Zy
AIDyOwAFbdvWn61gOLCCrg2i0Oo+j/qCY0MUMj1mKCTYj3nsD3j8I+CBdm/r
jW1ktLMRrh4bBaeT/DzjLOpBsj8j2Q8g+dgh4X5VtIVbj5DdjOFKM9VaUKg8
2kNhdsgsjJc/XQeUAxjKvgDK7wEUtDdKF7Ybb8mG/LQBPLxd96Pe4yiQZtoP
bRWvUY38iHGpolG9NyDzT4AM2k+nBVvQzmUwBQdrfDhmJ5RCp/KpMBzR44Dg
oA1OlwE4/6yl+3DUFxlNNWQ/09l+kCtBm6ChGNRHQjvgZRrXR/JPdvFTkWi0
I+5SIPpfQImgDajMyI4IJklialzta+pp7inyCYeDZ6MpkUgx2j55z6DiFvUW
37z00ks/Ouuss2xobpem5wt4UDTFTX5N0MtJjZr7oXVIXQnSlgCpv3eltsWW
WvumKXWBLL3pKnubl1fUPEaru1JVot3W24DK37Ibt8FRu0T1aum3+a4cc2Rc
8pXSGFvGIusRhrbaXwyE/Qp7YVNRK4XcCzYfFNzO5VT2M1cW2ejqYuU0Qxcp
93o1uSm8B1D+85C79TpAlHbqIjDa1dvluC6uPRPI+Z6qv/scVUj8nJUgLUOB
MoIo0MEcFL0g7R/gt66HQHgTRNsJPI8tOF6oI5IHyM+DtryiDsmHsuRFQPIP
nUv2JZNLHuCqJPs0q91uISEOWuoUwoDitFEeBjrUMmPl9Ug+jCXvDiS/Hyrh
ehi81X+Ur3luIyXbc2T9ugqZPFqg7Rq2nwfiD2fxuwHx7+EijqYhmuhUjHnM
5jIfNPMi5XYD/iIzP7C08iNY+a5A+TuRko7mGjeH5GeKgKn5UhsrIlDzuQxx
XKK+4IDSXI5kLgsBl2+EzAFNyq8CKLMSoaRG5D6UzJmOzkzIR5RH8SlGsQCg
eBMbB1rvZzo/xHiYNx7KtWEpEBQY+PXDcCc/6iX2ZSTvRuWbKTCisToPgNgR
sRW0otjQEMMHsxyN7HU10hhhlBd5jr1B2reiXD4N0uYALl8N2QqaAt4KoKCZ
E/VBIQB+Z7FwFnuVRoEOHp4NULyMbQXN2+wEQHjzZhoEwq7bwK4iCCKzKQUK
J9AJ1rMAkhcjVoO23OosuVCnqjdPldtMpbhkos1RHiG7waE/8RJ5E7S7D5q3
i1gdB9JmAlbPhywJbVHXJQxK1DrVBoEaKz8POpoldYA6HqTtAkA9g+0MTVzp
CjB5CydKY0KR3EgPkz4iIeR62uqAcwJImwHgPBWxODTHwQ5p+8MY3hIjN2Ol
QYQmmHty9Tf5JEQIdWQgN32iS+Pm/HRA6PGQnaGZAd3DeEQBMqGxmPBZCx69
gZas0JFDQpvMpYJaq75TxIfwbMPWhY6N6QHgTANwqOxEGkYi1vVpTHI0ol5n
90Qaz7Hyk/mnnQGDhyNGhI6b6ilB0G/eInYOfWsGMcXcA7rDhIfZrQyIjAiH
ZBpA8kDIatCARi/Hg/vxp4KC0cw8/PEZftVZClMdBeA76tF+CmufCrRvwSaB
jm7tDZRPCSn/Lsixi+RGecrNpruFbmFhHQxOZQZTAIM7IyaBjozuA0BMrh/E
9GARkYYwj4uF7Xgokn8ay58M5N8WKv7obPq+idqbymmf4Yo/COfngedkxueC
PeFmiwbRCJ4IKNyEDeEYRtcfKJ9UWnkmDvVdwC6OQbT5P6eYBmUE0TgTpI0H
NDZHTAKFa/0AnImNhDNTfh6sLmfVAecskDYOwNkUMpi14AFUbGjNkS4sVX/L
+hANFEqN8GjQvtTBWHxmmMGOIgZng7SxgMGV2FxOA7cPYAK6RLT4JUJ90TL3
1M5lH4O1BOw1ghiCvSHngLQxQPwVoQJwOnjAQJY/Acundkct8r1NoaI1p3Wu
6SDOBWmjAQga+aWhMnSHWWgouo/1uS3KBsyAQ2qrS8SPPoXMZlBBz4B2tI9T
OA+kjQIULsS2cCG4facQkkrVLxYKSmos7bOgvcmDfgEdbxAncD5IGwkInBcy
iIvAAwYDBmPzvrFWBjZOxJF0eQYXuDRue48ADM5iW1gPnjIEiB5TUjRFTX6l
uKu+sjB0ngKeGBdNZZfCHiT1NFzgrwQPGhrUzYEBeYB4qOiL3s2Jjtr7pNKi
L2LRw4Hok0Nl/CrwqGHBMi4dXnCRXE72InNlUTN5Ykh2QkfcxQxgGABwIhfw
zeDe4UDxqDIvOhP8+SZte4SwSU/gn76dqPMS1jkU6DwWl+6bwqLFWIepJ5VV
86tOnS3ii17sPo8a9zjw7HcTQVzKIIYAEEeHSvzN4FEjAIpRDUJBPe/Zao3v
Ric5mRLfVinoL7yMAQwGAI7gEn9nuCIUikfKEh9UjEK74Z5ie75EkbWj7cvQ
zFWk3Zw8IFrGgwCFNdgetoBHjgoVgtRGjs/ADkxhq69H+RUgbQBQvipkAPeC
B4yW2v1NzmjDJvsvdVWsj0JvCSnrPOQLvCJSGsoGkNYfQFnORvEwuGMMoDC8
HAUR2fkUaKQ/6AaGg7RU7RtBWj+gfX9sCtvA7bbR7A8g6FqVGoBPn7h89u/W
HjxHfamfK03ntn9/B2goorKPuafIVQwDz07lgyK7voDPPiGDeRQ8YBwgpL1w
1W6Kqr7+5cSD53RSmL4ZgkOxkl9f7KuvzFed5DnqAYFivT4AxFI2kqfAHeOB
8kF55eqr8+/onENVODizaFcRDGI/ByLqN4bUgeRqkNYbIFmMbQft5zQB8PEW
XvLJl+YQSFVCrC1VWtX3b/DLng+50FSyoCfZCaShPkRE4xqQ1gvQ2D1kKcEt
djNjcP0Aj2b9/XfGahyPhALkWh0+KDstE/RJC+cyqA5km1waN7B7AmQL2KZe
BE+Z5BhxD3QfwKiqvnflQpIQifrO9iD3OfAs9VC4Vn2nSBRpn4ON52XwoMkA
RC8AokUXln88cflcNp5OoLC8VQOm5fLzoN/pz+io6UYt8+eBpusYTg8AZ2bI
ll4Bj5oC8PRwAQrjaQV4yBmjzY1Q/DbM42GntwfqaL6nL0hzczwRmc1Mpjsg
szObzA6+bhoA0A0A6KTNxQfwL/stHG+KyMJ1K+ZyFt+sAYld11HkWdC55XEk
17PUbgDJZGxJb4EHTQWkaNZVV1M21h2cKRsZ06mFyyr9ecDDlKdxA9PoCmhM
CJnO18GjUMmhyXpdTO2zbsWCdibziESXcjxEeOvzOITUqY+RA+kFnhjncSPz
6AJ4jMGl41vgQXp3cgXDPMjuCud7V4Xk43UrFyosla4F7iPIwK6BK3IfPUrT
MJ1aog+gE+CiG7J4PPg98NzpEk6rqXoNDUvElJGni6obF9z6lYxd2AmGv4QH
6V6ayi0grQVQGRqynu+CB8xgJHomcGs21G//mqcINSs85F3mla6YManD9JX5
6ph8SpBPZrI0ilpuBWlVQGoQtqsfgdvNtFjRkawn11f9+knRagmRQqEdRkPn
AAbdS1fwHNS3itDcBtK8zRHU/nsHqUqgX8S0PgDPmBnkY+vveYQFwWkFBhdv
Tfqs7GmBRW6ocx3UbgdpTYBa75DpfQgeMCuKbJl1ScpBaWQrFjCyFmB5qS0H
34d/yn0e9Vad6oB3h/bffpr6EuC6Y0v8CDxudhlsrSAuRD02RZyOkp8Hmw6t
4NmoywL5d92bL5Z++ow6Ryzyt+BxcxI5kWOvOhNkVpFuPxEnDvU42V1dioyx
WgenuzQIK16Uo+A+l/8IHjQXEOrEPn3Z5esOWWQpNQE+qbvB+HyOcXyi7Qva
fcwfPSykcrd+wUr0W9u2bbNEVKpKo4v/AO4zi4LEIsIurpicaxWnjhf5ao/V
nwdaDU3giWjuKFJ7jysDH7XnWm0dy8bwP8IqxRAQtTy+F5YlAl9f1nFOVsYZ
VH1noP63AwppemRl8idw3Xygo0utOuwubvmJah2R9QUg651rzfqJLutZO9rh
21G58lQsYqEU4TaqC4qgeMWvSta60sNGMcLdTYtyVPYzWaepxPVkfVeQ9dZy
WacTiiks1QFY1d5jiz3qVqwnz7uBPJsmjziFKDhul5Nwsis4XLh0wWoRd1e0
/cLtHijIocb6vYk67BYQ/tABWt8VGX8UoYlvCnYLWr/BiUZOPHfL5mFCxh05
dZn8b0nUuQjobA7p9FegBNWdKj8ndYOBumZ+oh5lCTWiU5XsAZSguaEFE0e4
avQ1nU45VHLQmI4JjURY+fWGaFpsKk1vwEZ9kZ6IExbV+xBPh93y2nfCA8Fz
UFD8ZkMUmUVeft9fl3iNEhRzpnxpVNAGgOd4LSE2o681RMwSV+SUmJpfy1lO
CZsM7e5E5tGVf2pMrvd0uX7DrsWMzKsRNbqf63PMPcYxL3n33XdhL7vp/FAC
+GD710sr+XNYyTU333wzu6JI1CvOmfeV2KMhfLPoDZ6Derhea6QSVYIsz7AS
qiJ993SeIexbAurR9vp12RLMSTOFPXTllFSvaW6mKnjHcccd950zzjgjXt/7
YqhAkq/tCe6hNDIGL+PRzozUjFP90aQe1UL5aP7l6tWreQFdsOmYy789dtuP
V1DBMS9I1BpfabAmG0G2R6LqeSpqqGh1VfVy2iruH+mINJBFfe8bjz1myTee
buA5yDW8bJ5dKQj2U/XOk3pVgdZ6m5TcTqzzWyAvRTovlp9TyUD9ut7YKxvZ
l0xao3Ta/VKMRv1GWacpbWIB6Nsgp0WK6Zw5ssQu4G5XQTVa3YysJapyy02H
3uXUiUp3sKfuMnOPb6eo09RuMOjb6UsNVjw1pLhN/TYAKA5OYosoNifAi2oC
RXooIvxCgxVPlJbqSnBG+xCgPTgqE9G+3mnnZ7WA53hTb9h67UmFjdI+NuSl
9N9os3kZAbSnDvv62sl0yI5RJy61aMiOG61zZEgnealxQF1wDCmibiP9WBX1
j1U01Lx133Y/32CVw6TtkrbJQFt8mNX3u1dqRb6dqrtGgAc8K8VQhuoRs1PU
EaEtFtJlXeXuVmB2rF+/HvakP9NgTf0TXY23NJzVBWea5NSZA8CVKi6q9Mao
IDZaU29gWkiTV8Wzpq+V1ER9hr552R31fKv6HD1A3fVCHbK6Rz2Gt2KPxbwR
EpOJa3yPcS14zkjwnKcaoqkL8A9tMgdUWF6vQclmyqE360AY0pMNyX8LyP9e
IP87QP7RaQI7efm/3tzjx2CodD1Ro5Kqf13Ute3ncsKKdNNeZWRBgY4b5N3B
ErW95jdyyCGHRA19ucyBy39CnOQrudG92eywuShbj5VW8q+JLstuV+4rQcfh
orjAV3Iz5ZBtg95j+Vzb4xZyLa32v7xgwQJulRwGcv3VGnJ9i3tO1CK2lVby
MbBjNKB7uMsBl5KvhJRQleF7pFtNXot86yM6TfR0pFaIvwFKUDvmCMmSfkMn
TGMltzklUUvYWoeSXybaBGp/Z2ZR0W+vJKujmDRjHfUo+TBRCerTQ0peTlZy
p7ubLQ9ZzIPmuooX96fazk+AF2gG6tC8e3sSjq/uS+A6VNf7nuEu93nUsu6v
Q+cPgGWh3gB79JGv6Ys1aLpbfh60sfvq0PRdoAmNth4NNL0ErkMxzSBP0xb5
nExDoB4l74YaMqQJNQ9pchdZTC1K7nVKopZlFdei6ZuJfgMt0z6G1b1Ygzrz
Jgrt6e461L2VqG48+LvHRtWhOMJX9wDdHWoZ3FWHpjfYnpCSySCvx7m8cm/I
C+C6Ik3Wg2PLymii2Tepml4FPgLt83Q8UPJ8DUoeckqyM4qEZd0hNVHOUzW9
EvUWaFOzE4C6z4PrXD3s+/KHTf4Dvpzvvq0OTS8V2xP9Q1sbngjUPZes7hFK
DdmTiXp31KLp+UQfsQDkdS3Q9Cy4Dmv6jLky59/JnkgThTpfSFRilxwXRUlo
K+J1QMkz4DoUUfiWtc19HrWsm0ur+2y2/4D1qH+LQV5P0mmcD/Xv6Ro0PSo/
D1rWjaU1PQ783rKwEkG1FiXbzT2gdSvs6YbSSraFrIg07QvyejLQ9DlwHYoj
BnqaHneagBWVV/Jwoo9Dx9icAjR9tgZNT4DnICvazOqQt0NzLR9I9BEHg1yf
KnNFpJ+qQZ3u1834cr7y2tKatkQjInT83mlAie6t9XobRfTg59++0SIr2lRh
ujy1B7XnkaY7o97uUPfXWNPpIU0JsZGvztogtidPU7SPAmm6Neoj0Im1aL7k
EyFNVL/63u5pR4T9NrKiq+vQdGNU0zEgr2cCTY+D67Amii6CtrPRqKsUtCuQ
kusS/d7x4O+eBTRtB9dhTc+5u6P2tMGk1aLumqiPWAfyerbURL89FtKU6bfw
7enz8jmuFJI91aNpY1TTqSCvmSmj9NujYU0ijvA1PS8/D1rW+jrUXS7Lo2s/
ZXyh9RF+/r0JpZz/bTXopFk3QWuzM5hqUXdx1G+cl6jpM+A6VPsO8DS96J6T
7VUS1nZpHerOj6q7yP01zuF5Lles7pEa1Jl+tnzkRNZWj6ZzQtYmaPl5PR9o
2lqDpi86TVFru7gOdWdEfckVINcXAHUPh9WJeMNX97J8TrA82nm9lYL+JU/d
5nZ16sucnRJSdxXINf01qqlq0WTHgXAMlVES7K1AStZGLetakNeLokpcjez7
PTNKV9j+sCW8FiXHRZXYEX0/rxdzXh8Cn2IlNAYc9ODkU4OtQ5Rre+Zkrv1E
ub4F/I1LdJroWXkgOf925L3IOs4preTIqE3cDnJ4KVByP7gOK7GzIbBNlM//
odH821EDUF+L/N8HrkNRgW/dO+TnQes4q7SmVcAmUOsc5fpyoO5ecF2ROprR
FbSYM0prWh61c2TJ64GSLeA6VG/295TYiXZFtnN6aU0HRL0AisquAJruqUGT
mRAZiG/KK9lHWhHlH7XcNoD8Ixsryv9bLv9R2zm1tJKlUX+AekI2AJYRTaK2
9zXRnPCgxZh+TtG7kFpHLgZtIOQPUF/wRqDuLnBdkTo727+ovWB722vRuVui
30OjYVcCnXeC69wOsr63+ya429mT6Rdoq3gRdWp5nB/1e2hM+SqQlzs4Lwtg
/t9290TtyW7/UIuSOcBHoPlBV8v8U0m5A1zn4gNfiV0TFvDWfLftf6pFyS5A
CZoleA1QgiIirMSu4iuymOPqUDIt0TPsALneBNTdBq5DkYLvGb4tn5OxnXrU
TUr0B2h5gG0D+fRvrUGdPvNTfYTs6Zg61I1LVIfWWV0H1KFWB6qH+3nqvuue
E7U2OyurFp2jo1ESWgO6Gai7uQZ135PP8b2isEA7j64WdcOBL0FLxq+XeaHf
bqpB0/v687ynJ2urR8ngaM/W+yCv3nx7tp0bw5pEbOFr+gHlP2Rjdl5qxetd
SNU0INHGfpyoDvVHFKn7oXsOqgf4OXbGdy06+yTq/BD8XfvGfJ3Xg+uKdP7I
vDvQWySszczR31GLzp4hX5IZDfgFyL+1Nl/nZnCdixD9euDHTh2wO9JE2UGb
2SMlXYHf+A3IjfV7fq6vA9fhXH8g76b3Zk5WETa2pnT+W0H+Pwb5yqykoN+u
ZW4umvVz/VN3T9RiVpfOdVOxndC/fwZ/7VbOK+KP4gjfOj50n0etY1WCJlpP
9fgee+zx5rhx45QGZOr/CjJ5G0tAXcRFEn4mP8+YQDzjdyc6qD+DfN3Oud5U
Q66tKygygRXR/N+RqxwXLFiw9dBDDyUK/wHyZZo8oqvkanAdqvD7evn/pct/
1BiWR/N/CzBXb9mRenpQyZ1ACRosKVLyK0MdNFKFCRwUVXJDqMmTXYAU1XQX
0HRlDZp+TXnl0IUswZwqIrpAUAV3baIz8pYdRTXdDTRtDGsSFbmvyVZDRRZz
QKLOqxJt39sXKarzHqBzQw06f+t0IpfMz9nXpFW8oBqVzA1sY0idt/FOVN0W
oA4NvLoK3/d2vzPvqcjG7DFjRZouy/o9EWb1T9RkBiDEFNz14DqsicKKYPNg
b6AElcKLgQf0NkRMyb+ovNPz/3tzZZEHt1N+i5SgaRXOA3oH50U1oYU3lydr
+idwNypn9tTHIk1nJ/rCUYnq7k9Uh6IH30f8s/w8E/OkqjsDNFuagI/wDn+N
qntAqqMSdRm4rkjdH8w9RZ5+SaLOU6IecFKiugeBOjSxBtXNfTx1f3Tqona3
OFHdWuBBvAPIo5oeApouqUHTv8rnBO3OnrFc8abJIE1o+oXzJbskqrNTSnzS
F4PritT9m/qWiaYySoJRxtFRJd5SpKiSrUAJmqiGYgtfyZ/cc6KWZRfhFKk7
MtGDzE/U+QjQeSG4rkjnn8FzkI3tyhlGUcahUb+xW6KmzEIq+u0CcJ2r0Xxf
+O/m7RRFTgujSlZFlSx2z4sqsZNU/U6T88F1WAk9MWNF8VxnJmdk2lRL3V/m
XP9nYq7RFFac6/+UdwctZn5Uyf5RL7CPy01UyaMyL/TbueA6rOQvJtcBH813
z40q2TuqxFt2FFVip6r7Ss4B16HtxH07/5/y86B1zIlqWhq1juXueVFNmeVr
9BtN0/eX7QSV/G+6UlpHPNeLo7lelZhrb4GazHVCHdnby///cc9hj4vsZFZU
027A4lF94i0xiqrTW0Opj2vR9FeT/yKLMfGIuoeXUqHaEk26cLZzpHtyVNOT
/7e2c4HWq6ju+E3uTbh5kYQkvJKQK6QQwjMkIFEIQQo1KGojyFMTFvIoUEhp
lbLwFuICDY/GYDWiPEKXZWGlWEu1D20bfLSidWlXbWsrWqiyWqyrCytSHipp
zj5n9t4z85999vnOTdbi6v3ufDO//8yex5mzZw9ruhb8tU3TL0ST2WOOEU3m
LspKU9M7JGdT0x+ypmvAX9FsrzXtar6TjdHUi45uFA+17CkcW1rLkJLGsYMi
4Wzbtq2o5JOsBB39cCmZJHLMrhQW+W3CjjQHinC2evv27bwJgib/hwWd0101
qMRmj7e1Zy13SlxmSrzSKfGPgER0UEnmVz2C0w+Koao3haJOFeJftMlBPhho
GLzGKewRIOzXQDpDWAiHi/uYV9iYOVpc55TzKSDnim5ywoa83mRFfewwp7DF
5uDxbqewPwbCLi8JSxYTWR/bK05U7GMhvEybxANKfYz+hYMEbRI/DSSiA44u
ifQKotjbwrZVm7AF5uAR/L2dwqIhDQlD0SJnp8JC6Hjc27zCkPsFGkY2OyWq
g5WmRLQGySTOAJmhHnhwLJYkIbGzylu1LLT6F0Lxtol9FPBdOqjYmZKZ2RfH
nGKnmePobU6JfwokvhOkUxJ5Ss8khth94EE56pVLGrg2iVPjXknCftcp7DOx
MGK5BKRDa5VMWLgrJVuOUV8kOdSpPgtETDbHzG1OOcmxUSJAB91dcubEmRX7
3WIkLBgcfFEaXl63yVEnRlnOxSCdTN/ZwD9XsjD700IW8ahzLLzbKSIEadRW
sbGbiHmShdljDmQRn7LHuJvOPpsusg8vYlpFqNOtLGJDNxHzQRbSOwT9YdCd
h0FRH3Oio0Os7wDp0Doi6xMLJJHZJ/ZnOQ8BOeh+kKIcqp4QOVdvDb8d5OIS
QUEriouhfRn94+aYhC6tQSLQs28In6v3ki4C6Vxy9o8zSwxL5OxwdmwUW9Yr
TLUTA6OIMGhtt3cqLLzdb3v0aHpWWOGRzI85xaJQs16x4ciJFnsBV/xqj8Qm
gmrr8LwPkBiiXoFXStE6Dl3m10jc8cADDzA6kpicWxaJjrVdJpauIy32u3BT
3JBaq38IDB4o6KxXjjq8zOnOB+nQ+iCTs1gyAwM6krMNyEGt7ZWzE8g5D6Rz
yQm+OW1DexgetLA723sb/UPhZ71iH6OqrbCKEumv2fi4RISZfSzcLqeFbXEO
IyjyrFfYFxj9XPBXQ1iozbZlUbhGTgu7lYTtpQeP6r9IFApC6xX1RcZGQc4M
UeEpFvcqJGUz6FUo6qwXvTmNFm28nN1NxCF18ta+FDxDtZxxIAeFmfXK+TKQ
g4LpobVGNkiQnadDOGcR1nVazg2lF1Uk7Pgewv4WCFsP0rmEHdp8sa0vhe1Q
LfFdzkEChZ71iv07IPZXQTq0sJqVig17tbiPJRJJ3G84JSpXDy7+HqfEcCe3
lviWQSUuqxNFgz7qgeEqNy32Gu6BSOIpPSQ+DiSiEJ0uifTKp9gX6cUR8V8F
BpTTwDe8Ir4qcKYItOrIRBzRfDHvdyNRvwtiLjeHE+UfMqisaMweWBa64k16
WP08H+bcoUtKnSv1FOms6WsA400gnUxl2cB4lGSRdKSR0JGCkA3OQQIReBX9
PVB0VjdF9MJeOZBUH17kWA6hucWL/fUYmwznjd2wgy+nHrQXsYDd1X7//ffz
duo55hCGlmReJUm0AMJAJmooQTcEyv7j5ErIejBmoedOL/U3APWZJepkrZB1
7uPiRMQv+3dDwxV7JWLLgw8+OHSW2bnRRpxXUzilrg1iHUjn0rRKMuORrdlY
qv7O3jqTnZ5umT/IQBJVeAOW+HqQDs2XM1OJx4PM9hOJvK8yrHbx77mnjrT9
Osf4gN55eYUmkQ6IDU1mLqHq1AD3r7BxO6TWrfWVhJXGNeZwgRwgisJogvtW
LId+OwPk4pJTnzGuSglb6FrE1Mb4dqsIRjl0oikHuRshOS+AdCGKgt5xOb0s
LFokZMJWx5lRwrAfqSWOgj53nNnnkIeoV6JqO05HJ5v0rqYt7DWSBRtgOD6n
hU0DPe0oUxhyB/cK+6eSMMcCL5OoLlHlOQBt+U3nPna4c48MnbvwSlShKjgd
WurL5JxNBCfTn6pvh9e5Ws4M0NuWmr0NHdryyvkXIOd13eSsibOgBg3nVLWw
WaCPHWQKu7mHsBCuRAs7FaQzhDWPodEgj3Yw9wZ97IDSQ9RQ/OYAHXf3SvxX
Ri8KS9YkWR9bGyciiWgDcDb3MRQuRgaPLT3k/BvLWTuoHLJc6lnh1WHzFzrc
NQf0rNmmHBR9yCvnOywHbWcoOTw1Z3LCuKKXLKOxMMLfB/Ss6aWeRf9QmC+v
sCdY2BrwV7TemJEK++VYPZlds7O5UwubB3rWFHPIQPEMvcKa4B3R1hG6Acol
UV08zRnSth9RLwCmWNSEIrp6NX0PaEI7iC5NYbmsR/oR1jS/PPtGQx4KhOyV
8+9AzmtAOrQ4zOSExxzdvYZZDrq4XkaGOiHvn4UL/wbR9CTQtBqkc2lqnk6j
niX7lPUUPJI+Y0lYEFqAopjbXjFPOcXItJuNerTVQYN4sok3zRzSmhE/2npG
0Z+9Sv4DKEGvFwwl9fbTSOgvu1auXFl9bo9gc0AZfUaARkdkER111Lt/M0JH
2bVu3TragFFdI3tUVy4RvMO8vYeM7wMZrwbp0Doh6yX19uhUapDzzz+/ErRL
wdc7TRV2H+IfAOITehHXIYmqROg9CwpZ7GV9GrCiF4cu1vDSLHv3lWSGIt56
gVUQFy4D3aWJ5rXpKfB6oB69mUSBbb3A/wmAVw4K/FbJLH5jQEbbB/O/AOZx
g2Ke03xRrxcWNQVoy+2zGn1GymBg9C4fzZ4Z8NtAZshyUaRVL/APQRnHgnQu
4MadpdVyOz3IkBH9CGAeU8KkaSMbB8jtS4YrytYL8iJIFyIO6i3Poznn1WWQ
C+SLph2i0KVeOFVfnO5okE6m2QzzQsnCtD7vQzbCTMLZ0G/Ik8fAbLxo0Xv/
yOZQCEgvpopLw+mOBOnQfJR1kvpu+dgO+8CFsJEa7giQzgW3Ic6saJsorqMX
+FkAvBykQ4P6tBR4o2SGhhz+ondnCwH/GAAjVzkXcHOco9VeUbxGLzDFsqHu
MjAmnQlKrLQP0k8YaVkZKZpdMqRw/ip7H57Y5s09MJ9jzMPAX12YzVvB0iTI
maEQgV7MnwoIPw0ij1SZDrOeHq7IaLNDtJ1/rxPzeYC5FKQzMK9okmcDEllk
H7j/A3CHdIML70nbLBLFQvNivuDElCkyw0zufy5aJHoR5cV8EWAeDNKhWSjr
QvV1SOrJMrJIFN3Li/kSwEQ+6i5MdcsxsM0+mC/Xn0Ued2MgHRrKR1NMdHEx
slL0qrUjcGRiAwNfK5mhoYm/iEJVeYF/BoCXDApcX4JXslcUh8qL6Y2zg2am
DDO5ibZoCMiZwAusguiYTw0u4N8E6lFmKNqPF/gVALxoUODfkszMSRWF8vEC
7wLAC0vANCFkAxdlnizueiOh2Dzo6JbBdT3IAhno1X1ZQyB1XdABILHB2kyW
rbaJouQUWaklKPvgpq4J9+ckq6VwziAzxhviREVjRN5e6g0SD30vlWozHFbO
WB2TakZ9o2QGJtXerKpemWG/QVnfI5mZ9ooC1XSiTkIM0W/7gsRottorpR4X
aablIvfGTtQqkhBTo7OpLmp6s1acY1Fsjk6s4SSTZp0PErtYb44zS2y4N+so
YJ0HEqMpK2PdLJmxNSAbRl69najD0TdNjQ5ju6jVlYvmEnFjX2p6mFIBQ0vz
QzY2UDCdor1uAJl14prBJc8FSQyusHOXjVlkm725ZnLJ6M2xwdXcbxONSsgO
URCIToSzmGE2SGIQvl8ITZtD4Q86ETYHrqOH1FkgMQqcmvUUdY1duuiPLBId
tuhEPdtJjWbWjFpd5QastDfrHMA6EyRGo/3UlPUOEWRaLjrF3ol6LqCeARK7
qO8UatOa0dGhTtT7AGoUSsVFnVxOVrTmc+SzwajnAeppIDGarTLq8EYZW3Nv
1hAORe8WjYLELtYm8lZkF8ia0YnyQaijblOkphE5GyXqS5aTOZa/iE5LdyJE
sY9QJCODMDiAttkrOvbciXVfwDoVJDZYg8dOthIkK+1NuF9MSFUxBSQ2CD8s
WZi2ic6bdmLdH7COgMRoBs56FLnLFa0UHQrtxHoAYEXhw1ysTYw39EQb2Ss6
ANqJOuwM6YJqz9CqjMaJNpoLpqSs6D4ksddOhLLvEsRmXI7ZKiNUdxqZ9ooO
cSLWl0u1We//TYmoh2qH4CFXXYbSCuMUfxEdUexEWmc6or1mqkQNZDQ1ZZD3
CaRpnOjgYSdIFeiJ2k1Vo03YXKtTMMneXGHnf3e2T27aVMftV+fzePLPuB4g
hioNMj90Jq4TV/PiZOf4+DgPLTKMZ4OMuvbFnBTRya9BuKo/8LaDwaWuQwHL
tAmiGQl/CETy4jYDam41aR0/1k4M2hT9B64wdbiYGzczMLrhozjHoZM5faou
/KNaO97Dl9zlUTQ5dMDmPvmsk8kJZsoajcUjKetDIggMInuEcJgJV3kIPyGE
pl2iszCdWMdKrMmAd5yHur5/omSj6BBCb9YRwLpCPuOJJGNtrpRonerQmYPe
1FMA9bEe6uaWiILl7hHWqYD1GA/rI8Jq2jA6d9CbOpwu1NS173D1azZ6NZcf
tK7OkAd/b9ZRwHpUmfXTwmpaLnLj783a7NBEOyFHlllR1H6x1z1JGBWpYkfx
DJbZK0WkLy7hkMt+b9Zwhk2zHuFhbYLMt9or8kjvTY1uT1juof6sUKf7uJHl
Igf13tTqGgTuNg11NKsNp9R/FktLbHiPsM4CrId7WCmoetGGkdN6d1aSPRsQ
LvMQqtjppuUiv+pOrMjpUN0TwdSNG3I0l2XUn4vlFi13mZP6ZyBd0RrQJRCH
eqg/L9TAcvcIa3gnqVnrCKfVR9mIQMGwi/Z6KCigN2F4m6sJl5YJ/wYkR/aK
vK57s4Y34vqN/iFl1p1NHbZZKfJu7s2a3ChBvx1cZn1MWIFt7hFCdV0EE74q
xqh/S1m/GH9ROwRG9oqGnN7UwZ9HU495qL8kXzQtFz2u9qYOvlOAOpofJqfU
XxZppg0jH93e1MFPTVMv8VBTLGEZx8iG9whh7aFYAbq4vhILKlousoverAcw
a1MV0WyVsT4urKjlOVvk8tqdlZpoIRMu9hCqeLbpE21km8jRtRMhGkgOZNZF
/P+yPk/giR3uEZqFUl/8HCiEGVcTrDUai5AdIkfR3qyLAKvYZsaahGMt2iFy
tOzNquyQWaXPZ6wqCKtpkcjRsjer6tXMqt5B8wia9SMVg9QclZDLZW/q8CpF
U6t3+2VqFFAU2QVyF+xNPVamjmaASSn1P4o0cz5FzoS9qV8lhEy9wENNgSWT
cWxPEkbV4yJM4kIWbRhd/dSb+mBAXZvdFN2oDJbZsgoDadoyctnrTY+u8gh7
Sk3VUfrJ1U/1MoIn5qwxvi05msMg8uXrLWdpLIco603zKVoOg6it6bKiOjhi
3AF606PjojX9SEQ/FN4EDuvLApobb6vKzezpO03Obb0BOfj1llDbE1f2jq1b
t1YZVf9bD2uY+YmGr22eRw5pipn1/rzEXJ6FsIGgs1Ozyzq+KzpM40fOar11
UCMjY1EHaljE3jEp/ZZZPoX8Syx/j6Dvx+jBiVqzqi3YMuuT4IvI7JFnW2/+
feKCZMhUu0bcoUjOpOrXSVDJUyLX7AzIU6u3ErILZERo72NmixIV/y7pDtHc
WP2jEnf0pZ/O9IlXE/02owX3B/F3xITUtSZc3P19WZtemduMuiOM0acLelVS
hv60fKdk/YPWcOQoU/2rKwOYSAjKocFplplU/YrBk2ByZCLNVkA1fwyAu1ON
4WxlIYCRRhttQaN4bDT61dsc4szU5NqpsyWb6nX1VT9DxDSNtlddA7s/yqie
iZNToej8Kdms8jtqJ6xzwfPgCGe5gtEMSBRorX4cnYqsqfpMRT5tR50v7RGb
IFogHMucU8vETYCzaKhCh06Rs/Hd8lk7enhbl3V79HQilU2jRW2nZLEpPwUX
I2NFeyFq0uPqUoFN26nr9S62DXRWsHEniJ6Rh1skJIHHCAhtO1BVkC12kkCm
gWwGbcisBPyTW/ib2GTRUIbqpllBRauSD3dRMsxKUCiEVUV0nvk09bNCzV9B
2yaj4DMV8dukDnEyMptH7ztqH6QpEX8FWy2fMvo6+FeVFm1JqEccbnEV+dRk
fokrOTEXNJfXbqMjmhlW9k+a74KVeL6OIRP34j7PuMvAX9WlHzzPTKqfLwXu
uTpRZL/oTGOyP0C/bXNi/jj+rlgCijBYey/zokez/lRYudLRBgni3yqfmax1
vEY85iEXpOSsZ22wKXgTiCsa5NABQWUVbH0q9KkJTksEZLrIyYtGOppiavuo
sMk+8DwZwqpqC0Y7CfVDclW6lzrEbM5MA8UwP1rqukIhfLIUMXIqKPOCe1G+
yEaOhrY5MQ39dodTSf0oig0HeYcfXhLTNAtvTVX/snNi5HVDQyBa/KAJ6Db5
zNRBuzLIjtaCxOJZguwouyUv7CrpfoAOyKkFACNscfI3O6u5RaGDPWNNYlcj
zEnlhOL1C1O000BrDeoWSMQvwDfqVx3YmNCxr+b5OujImyKRMj+VooJa8dCK
Vr3hwKjuIe9ziqL3esiy0GWX8s4NWdbClJ9+UH9AGyTqrSYXfIuT+qtMjS7M
nif11m5AiyF1PdqO6MG1KkJi4ntJg+dGZvnoWH79RGJYzFJcxaKXko+Pj8MN
NxVI1WR+jGs3sQkUAEEigtQrxQDMA/8yyDwszNWZsuLW2s1O5r9i5ovBX8NC
32URyyFwPYbUd9GqoVKt+7mqbnIy/3lDldkGCoEkp3lQ31sBmVUkpHgvikzY
i0ku4IVxrwmMVb1VMGf/4yHfXtIs8ZZTYrjjTlI6sIAM93IpqL39Xw1Zm6VV
9DCEHvpulM9M1k/GOqXxKXJbsaHXQLiwbgVvmiLLVBFhTbj63JrZ5L66XAtx
wzs7bJdeSDo3WW5tYxj9FUilfOG5lZE1qni1Jt99g7XwGyAcLdu0T3BU1Lud
SB+dqHY9C0Iqn2zTDFXIVxOX9mKKLVyswbMhXOKErfa3q6y9SHcxkmpFPPGd
BzHmSjWbVqaizJpAd8bfFSvr1J4XQFZaSBWNTsVrNQm3DNaKF0Mk5a6cvl6J
TGyTE+4WhivWVzKVXQq5UNAWsS4vzU3OxqxrqdSYl0PCxJ2raHgqIqvJWk90
xlhSbNlrIF94dVIYPLhcFYXV5LueWzYxu8tKDY3qchNkDd6jbVZ4lZP1urgd
0nY3prLrId+BIhFYo5fqmoFb+EZIVbsuVKmQ3akYqybVlRPSruOQMHlXXbRB
FVnVZA2XMuB2LVbfLRBOheEwje4yAPcKgNtIP1ubF09uWyDiEmmCeIwhu/OC
XTQhLXw7JKR3BkUbVDFSTcLzmNBuyLsgQ+JWULQyFfvUpAkXoWVWdkWX+vo9
yIrcEpHRqaduk/XNXHN229oz3Ecgq/I5BNbnJXwDE9ptez9koNN5Rfva4GQ4
Y0Ja9AFIGG6YKQwj/G0V8dRkrQPU4GHkiuZvxenrIYi4TFSaRneRE3ENNyky
OmuYexjyqdcEwNC8VCGaer9GfgQShkPNeog5MC6PflM7eibr8W2NXOwmn4F8
ygvInMvULqnJt6LUwvUMPKrrEjX0X0DKo6QhwDLKyxbiLPRr589BQoo5Uhxu
VBBVk3DZwK37BUgV3sm2TXBq897kW2q3rrMGvwRZldOXOdaowKMm6xizJs1r
z2hfgXDHSRZgoPEiIfdDMcBi234DIpFTS9HiVPBTE0ncjPu06D9AwhA6p836
3uxkncesrdPZtyGQCmVmmpiKH2oCBY9xqz3xdPYE5EvcJRIr81JNbyoHDSKd
9t+/ByGD70HbjKYCm5q4U7lVkQUWO8XTEC5EHGtbU51ZhMO+vcRXrLxkY+oZ
iPZa+bZpfCoYKJfyillH3vb8b8h1kmQBjA7RvKxodmZP2cUW+19YfPD+aDMn
5aDAIM/H6aT/iW+uum6zvYKeg4SnCKFpU6cDwloz7ovIR+jCJn1xYEuIX4DE
a0W0aWoq8CcT/49q3MjU0PkuuvC52OCvQDh6TJF5i1oJgfyQQZDDjrokvb1d
qdzMb4t+nNbk3WZ+Kvonl/d0nE7MD3lJ16O30bKEMwohQ/UUlkZcxloA+RRX
Y9KeyEOehkVr3iKcmRDydGmRdFs7MrpT5DOG/C5DLgFUKmdnW2e+VfSDhpDE
8hBNOK+ZtSuK+3KqVBnoAlTuAkjz+iYzPawgyzsZEH6LPsPDCrq4Vo3x5syl
9tRT3HWShWmDrwW43+TmTWzQuJ64Q2tjf6czJR/THlWQUi7va3E7iAUgJ9d6
IW5awMGQMKyQsrFHx0CPuCiQS6HdVwG0YzrXJXZsCj5obbaqgqhyeRSeCDX+
CQD4iEagPUoeASHfJGJNC1XlMuRfx2KkwU8GGVAPsxv8GEhIdyjoR7bIEFWk
Ueb6y6Y+UIOfCtDU0Xtng2OHpfD4iE0TkVL0RNTMp0li/uyg9ho8EXKtFy7T
EFUkVCb8EyZUq39GkvAw1tR3EqQK+/6FoYbLWCGfMVWImZtZHrrEQr3cdjYv
dlOiK2eKhqgGOS7lE1x5SfOie0HmSl2Wmvd0yBX2ybDZIa4/YK5zAYjyJHLW
F/ZIOlfy4aEFmZ0KaMrl7YjTSQOje8JGY2B7q4rQsJfSeZKPaZHqjAkD18cO
8ZizAeRRP2yZrb0eQtKed9EKVThQRqPXTcgKE19TqqY6HoFZedhBKTRM2yCz
HBB+ME4nrX1ZU6tNy35z06ZNoKIuhEAXSWuaM9syALTVaE311qXUchsg0NsF
yFxbHQaAbi+14SWSqbOzYs+kYKN4EEFIt5qNZlfQFZBhozCYJvRLgGazr8WM
WepqyKS2QkwrUk85zDQ+cY2GnY4on+JYoOKqcCk3MJKjld4FCw1eBthSUKHh
gu/MUjptxFHh2GEoeJx/UD3qI8MZA3CbnI3kmFWw35ByDTBnFRVbkuGu7tJc
74XF17vqJRtZDAoNO7YT0FzYFSj4SmELQkh1W+DefWnzN/vp5w5IcqUoMg1n
IWDawG2DDKd1uPkABLpKgExjUQEgGeiCiWs37Pnz6ySsZEpqa4xLeVtbu9kW
fTfECC6e2TRB5oMw1peaqvZRan2/TsXeC2Gulbo1LUjtbjLWWRPXYNidZ5Pk
Y1qTilzA5a3r13QPQqDrpOnSjePIluYBoNPtRuxSW9hvJ/isY7tCSKcyUusg
hDCwe06YLdssSgVXYKCT4nSJRdkt9iikobMZaZ9nGbMBw4kT107Y++Z6aSfT
iNTRdy5vlb/FqKzPQ4LfFoK4ichSULlhT9FqGGOy2AkxbpAK5e6NLGUmAAp7
hqh7v7NzQ2FHGloPFW1HRSvgUg7j5kG2Y9vv45DhPXFTFY1FvVdkmrAvmDVa
sYLQm4GvQ65xyQKYEKI5aEJbDLvH/I7kY1qUihDA5R3Yo+3+GdLcLG2HOjoX
oM77M01yqtzRdsWqwm4xmwXONCx1ep/Lm9valB1nEuwZ816RCmwMgc3q0Ybf
hwz0BKCCn8V2pE7WM8M0ZujeVNi/5VZpqsSOossRq/9POY/EpInt2LXwI0jw
PiEoGUtTSlW8Xf/GNPEsLPz9Uo1Jp6bz4Dt3l7Zz+/bt1X/daxz7p9yWtnrU
whvbq/FFmO3toCHRev/Ckgw0Pv8cFnWHFMV9Zz9Q1Lmlooo1hh087pR8uJHQ
M8Nb2+uOfmTXotKPrdwuC0De6l2gUwv9wO4XH4grkL6L1tD1a6W2dRj9mA0L
2ibU3FL7gILOcNbcPFjKXaB90Ar81MHqEHs7hLho2t7Rkvtkp7RFsJTkCnsq
Ba1hV0spxhhEP8ZgQeomem6pWaCgVYPVIfYXkIvk0TJYYjraNXc4zFtd/M7t
g5a16v6/LoLwG/uPguZC68XD4kId+5f0A7+ER5eyj4JC5SYruz5PgKXcy22F
FpgHDVaL+J24uhadm06tI4PQZqJ0DU+nwILQ7eYjoKB9nTV3GixlB2ifYVCK
Or/fpQ7xi+ff5+aaDIqa5RT0Rph3fa34VG3lOvfa9nwbd/TjLbCUj0vr0lfH
x8eZP6wCO1YVfmtLb9zrkPxVwKCqAKq39uo5H+b3oFR4qKLy0wH9aF6SDk36
f1nwkbQ=\
\>", "ImageResolution" -> \
144.],ExpressionUUID->"6f83166d-348a-4ebd-b183-167aa34b949f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"GitHubData", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<yujieteo\>\"", ",", "\"\<play\>\""}], "}"}], "]"}], 
  "}"}]], "Input",
 CellChangeTimes->{{3.910531023559439*^9, 3.910531024068638*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"8b25ced3-f944-4092-a8c7-3a5929d50263"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"GitHubData", "[", 
   RowBox[{"{", 
    RowBox[{"\<\"yujieteo\"\>", ",", "\<\"play\"\>"}], "}"}], "]"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.9105091111412325`*^9, 3.910509158418783*^9, 
  3.9105310259471927`*^9},
 CellLabel->"Out[63]=",ExpressionUUID->"074b9613-dbe7-4b6a-b87b-c288cb77c489"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GitHubBarChart", "[", 
  RowBox[{"\"\<yujieteo\>\"", ",", "\"\<play\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.910509097516612*^9, 3.910509104645893*^9}},
 CellLabel->"In[64]:=",ExpressionUUID->"83c1b229-5fb9-4dd9-960f-b11cb0110bd7"],

Cell[BoxData[
 RowBox[{"GitHubBarChart", "[", 
  RowBox[{"\<\"yujieteo\"\>", ",", "\<\"play\"\>"}], "]"}]], "Output",
 CellChangeTimes->{3.91050907696475*^9, 3.910509112330327*^9, 
  3.9105091592767687`*^9, 3.910530978636676*^9, 3.910531030663593*^9},
 CellLabel->"Out[64]=",ExpressionUUID->"f663f547-7802-4bc5-8ca4-a6301689c32c"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1269, 647},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"13.3 for Microsoft Windows (64-bit) (July 24, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"dbbf75c8-a953-4069-8f88-b38ac27e827a"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 156, 3, 98, "Title",ExpressionUUID->"256a3eaf-adf7-4d54-b882-918b704f819e"],
Cell[739, 27, 268, 6, 85, "Subtitle",ExpressionUUID->"9a3f92f1-b4ec-4a0e-98d1-29be673f3e2b"],
Cell[CellGroupData[{
Cell[1032, 37, 151, 3, 67, "Section",ExpressionUUID->"868900ea-5a7a-4653-97b3-fbafadf79a9d"],
Cell[CellGroupData[{
Cell[1208, 44, 91246, 2208, 5931, "Input",ExpressionUUID->"9427b6f4-5acd-4205-aa6c-3d0f4a1f55e5"],
Cell[92457, 2254, 300, 7, 32, "Output",ExpressionUUID->"9f3294c9-c2ba-4dfa-ae98-1d5c83bdaef6"],
Cell[92760, 2263, 383, 9, 32, "Output",ExpressionUUID->"bf88969a-ab3b-4077-9e08-ac93ae893b5f"],
Cell[93146, 2274, 97193, 1604, 1017, 2121, 44, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"68f8ec39-a4a3-4383-99ad-6635e83ee31c"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[190388, 3884, 156, 3, 53, "Section",ExpressionUUID->"2c791fac-cdfc-4fe3-b2f0-75d5a8789c66"],
Cell[CellGroupData[{
Cell[190569, 3891, 908, 23, 67, "Input",ExpressionUUID->"07070875-9456-414f-a5a9-8fdd78795705"],
Cell[191480, 3916, 302, 7, 32, "Output",ExpressionUUID->"0ca66c99-6d87-4fc4-82b2-29d394baf3f4"],
Cell[191785, 3925, 383, 9, 32, "Output",ExpressionUUID->"409ff99b-7b60-4a8f-a6e1-90b60c401fae"],
Cell[192171, 3936, 97191, 1604, 1017, 2121, 44, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"6f83166d-348a-4ebd-b183-167aa34b949f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[289399, 5545, 309, 7, 28, "Input",ExpressionUUID->"8b25ced3-f944-4092-a8c7-3a5929d50263"],
Cell[289711, 5554, 337, 8, 32, "Output",ExpressionUUID->"074b9613-dbe7-4b6a-b87b-c288cb77c489"]
}, Open  ]],
Cell[CellGroupData[{
Cell[290085, 5567, 261, 4, 28, "Input",ExpressionUUID->"83c1b229-5fb9-4dd9-960f-b11cb0110bd7"],
Cell[290349, 5573, 330, 5, 32, "Output",ExpressionUUID->"f663f547-7802-4bc5-8ca4-a6301689c32c"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

